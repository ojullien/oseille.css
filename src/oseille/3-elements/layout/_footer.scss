//
// The HTML <footer> element represents a footer for its nearest sectioning content or sectioning root element.
// A footer typically contains information about the author of the section, copyright data or links to related
// documents.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use 'sass:map';
@use '../../2-settings/colors' as colors;
@use '../../2-settings/fonts' as fonts;
@use '../../2-settings/borders' as borders;
@use '../../2-settings/box-model' as boxmodel;
@use '../../2-settings/responsive' as breakpoints;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

// Mobile breakpoint
$_mobile-breakpoint: breakpoints.get('medium') - 1px;

// Apply styling only to the top border of footer? (boolean)
$_only-top-border: true !default;

// Classnames
//
// Keys:
//   - footer: footer class
//   - sticky: sticky footer classe
$_classnames: (
    'footer': 'page-footer',
    'sticky': 'sticky',
) !default;

/* Footer styling */

footer {
    // Page footer styling.
    &.#{map.get($_classnames, 'footer')} {
        // Always apply background color to avoid shine through
        background-color: var(--footer-back-color, colors.get('back'));
        color: var(--footer-fore-color, colors.get('fore'));
    }

    @if $_only-top-border {
        border-top: borders.get('width') solid var(--footer-border-color, colors.get('border-lightest'));
    } @else {
        border: borders.get('width') solid var(--footer-border-color, colors.get('border-lightest'));
    }

    margin: 0;
    padding: calc(2 * #{boxmodel.get('padding')}) boxmodel.get('padding');
    font-size: fonts.get-size('footer');

    &.#{map.get($_classnames, 'sticky')} {
        position: -webkit-sticky;
        position: sticky;
        bottom: 0;
        // Deals with certain problems when combined with cards and tables.
        z-index: 1101;

        // Uses media queries to un-fix sticky headers / footers to be able to present content without sticky headers
        // and footers when the space of the viewport is limited.
        @media screen and (max-width: #{$_mobile-breakpoint}) {
            &.unfix {
                position: static;
            }
        }
    }
}
