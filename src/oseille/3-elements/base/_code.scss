//
// The HTML <code> element displays its contents styled in a fashion intended to indicate that the text is a short
// fragment of computer code.
//
// To represent multiple lines of code, wrap the <code> element within a <pre> element. The <code> element by itself
// only represents a single phrase of code or line of code.
//
// The HTML Keyboard Input element (<kbd>) represents a span of inline text denoting textual user input from a
// keyboard, voice input, or any other text entry device.
//
// The HTML Sample Element (<samp>) is used to enclose inline text which represents sample (or quoted) output from
// a computer program.
//
// The HTML Variable element (<var>) represents the name of a variable in a mathematical expression or a programming
// context. It's typically presented using an italicized version of the current typeface, although that behavior is
// browser-dependent.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use '../../2-settings/colors' as colors;
@use '../../2-settings/fonts' as fonts;
@use '../../2-settings/borders' as borders;
@use '../../2-settings/box-model' as boxmodel;

// Correct the inheritance and scaling of font size in all browsers.
// By re-applying font-family and font-size
@mixin normalize-font {
    font-family: fonts.get-stack('code');
    font-size: fonts.get-size('code');
    font-weight: inherit;
    line-height: 0; // Prevent element from affecting the line height in all browsers.

    -webkit-user-select: all;
    -moz-user-select: all;
    -ms-user-select: all;
    user-select: all;
}

@mixin normalize-text {
    direction: ltr !important;

    -webkit-hyphens: none;
    -moz-hyphens: none;
    -ms-hyphens: none;
    hyphens: none;

    -moz-tab-size: 4;
    -o-tab-size: 4;
    tab-size: 4;

    text-align: left;
    text-shadow: none;

    word-spacing: normal;
    word-break: normal;
    word-wrap: normal;
}

@mixin normalize-inline {
    vertical-align: baseline;
    white-space: pre-wrap;
}

/* Inline code semantic styling */

:not(pre) > code {
    padding: calc(#{boxmodel.get('padding')} / 4) calc(#{boxmodel.get('padding')} / 2);
}

code {
    background-color: var(--code-back-color, #{colors.get('code-back')});
    border-radius: borders.get('radius');
    border-style: none;
    color: var(--code-fore-color, #{colors.get('code-fore')});

    @include normalize-font;
    font-style: normal;

    margin: 0;

    @include normalize-text;
    @include normalize-inline;

    a:any-link {
        color: var(--code-link-color, #{colors.get('code-fore')});
    }
}

output {
    @include normalize-font;
    font-style: inherit;

    @include normalize-text;
    @include normalize-inline;

    border: 0;
    margin: 0;
    padding: 0;
}

pre {
    background-color: var(--pre-back-color, #{colors.get('code-back')});
    border: 0 solid var(--pre-sidebar-color, #{colors.get('sidebar')});
    border-left-width: borders.get('thick');
    color: var(--pre-fore-color, #{colors.get('code-fore')});

    font-family: fonts.get-stack('code');
    font-size: 1rem;
    font-style: normal;
    font-weight: normal;

    line-height: fonts.get-line-spacing('main');

    margin: boxmodel.get('margin');
    overflow: auto; // Responsiveness
    padding: calc(#{fonts.get-line-spacing('small')} * #{boxmodel.get('padding')});

    @include normalize-text;
    white-space: pre;

    > code,
    > samp,
    > kbd,
    > var {
        background-color: transparent;
        font-size: 1em;
    }

    &.scrollable {
        max-height: 20rem;
        overflow-y: scroll;
    }

    &.line-numbers {
        counter-reset: linenumber;
        & > code {
            counter-increment: linenumber;
            &:before {
                content: counter(linenumber) '.';
                color: inherit;
                padding-right: 0.8em;
                text-align: right;
                pointer-events: none;
            }
        }
    }

    &[data-lang] {
        position: relative;
        &::before {
            content: attr(data-lang);
            font-size: fonts.get-size('code');
            position: absolute;
            right: 0.4rem;
            top: 0.1rem;
        }
    }
}

@counter-style linenumber-style {
    suffix: '.';
}

script:not([src]),
style {
    &.display {
        background-color: var(--pre-back-color, #{colors.get('code-back')});
        border: 0 solid var(--pre-sidebar-color, #{colors.get('sidebar')});
        border-left-width: borders.get('thick');
        color: var(--pre-fore-color, #{colors.get('code-fore')});

        display: block;

        font-family: fonts.get-stack('code');
        font-size: 1rem;
        font-style: normal;
        font-weight: normal;

        line-height: fonts.get-line-spacing('main');

        margin: boxmodel.get('margin');
        overflow: scroll;
        padding: calc(#{fonts.get-line-spacing('small')} * #{boxmodel.get('padding')});

        @include normalize-text;
        white-space: pre;
    }
}

kbd {
    background-color: var(--kbd-back-color, #{colors.get('back-alt')});
    border-radius: borders.get('radius');
    border-style: none;
    color: var(--kbd-fore-color, #{colors.get('fore-alt')});

    @include normalize-font;
    font-style: normal;

    @include normalize-text;
    @include normalize-inline;

    margin: 0;
    padding: calc(#{boxmodel.get('padding')} / 4) calc(#{boxmodel.get('padding')} / 2);
}

samp {
    @include normalize-font;
    font-style: inherit;

    @include normalize-text;
    @include normalize-inline;

    border: 0;
    margin: 0;
    padding: 0;
}

var {
    @include normalize-font;
    font-style: italic;

    @include normalize-text;
    @include normalize-inline;

    border: 0;
    margin: 0;
    padding: 0;
}
