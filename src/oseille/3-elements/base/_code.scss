//
// The HTML <code> element displays its contents styled in a fashion intended to indicate that the text is a short
// fragment of computer code.
//
// To represent multiple lines of code, wrap the <code> element within a <pre> element. The <code> element by itself
// only represents a single phrase of code or line of code.
//
// The HTML Keyboard Input element (<kbd>) represents a span of inline text denoting textual user input from a
// keyboard, voice input, or any other text entry device.
//
// The HTML Sample Element (<samp>) is used to enclose inline text which represents sample (or quoted) output from
// a computer program.
//
// The HTML Variable element (<var>) represents the name of a variable in a mathematical expression or a programming
// context. It's typically presented using an italicized version of the current typeface, although that behavior is
// browser-dependent.
//
@use 'sass:map';
@use '../../default/stdlib';

// Variables.
//
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

// Font stacks
//
// Keys:
//   - code: Code font stack
$_font-stack: (
    "code": (
        Menlo,
        Consolas,
        monospace,
    ),
) !default;

// Font sizes
//
// Keys:
//   - code: Font size for monospace element like <code>, <kbd>, ...
$_font-sizes: (
    "code": 0.85em,
) !default;

// Basic box model.
//
// Keys:
//   - padding: creates extra space within an element.
//   - margin: create extra space around an element. We reduce the default web browsers margin.
$_box-spacing: (
    "padding": 0.5rem,
    "margin": 0.5rem,
) !default;

// Line height
//
// Keys:
//   - main: line height for most elements.
$_line-spacing: (
    "small": 1.5625,
);

// Borders.
//
// Keys:
//   - radius: rounds the corners of an element's outer border edge.
//   - shadow: shadow effects around an element's frame.
//   - width: thickness of the border.
$_borders: (
    "radius": 0.125rem,
    "shadow": none,
    "width": 1px,
) !default;

// Main colors.
//
// Keys:
//   - fore: text & foreground color
//   - back: background color
//   - border: <pre> border color
//   - sidebar: <pre> sidebar color
$_colors: (
    "fore": #f8f8f8,
    "back": #121212,
    "border": #222222,
    "sidebar": #215cca,
) !default;

/* Inline code semantic styling */

%_normalize {
    margin: 0;
    padding: 0;
    border: 0;
    // Prevent element from affecting the line height in all browsers.
    line-height: 0;
    position: relative;
    vertical-align: baseline;
    // Correct the inheritance and scaling of font size in all browsers. By re-applying font-family and font-size
    font-family: map.get($_font-stack, "code");
    font-size: map.get($_font-sizes, "code");
    font-weight: inherit;
}

pre {
    overflow: auto; // Responsiveness

    padding: calc(#{map.get($_line-spacing, "small")} * #{map.get($_box-spacing, "padding")});
    margin: map.get($_box-spacing, "margin");

    font-family: map.get($_font-stack, "code");
    font-size: map.get($_font-sizes, "code");
    font-weight: normal;

    background: var(--pre-back-color, #{map.get($_colors, "back")}); // Allows live color tunning
    color: var(--pre-fore-color, #{map.get($_colors, "fore")}); // Allows live color tunning

    @include stdlib.box-shadow(map.get($_borders, "shadow"));

    border: medium solid map.get($_colors, "border");
    border-left: thick solid map.get($_colors, "sidebar");
    border-radius: 0 #{map.get($_borders, "radius")} #{map.get($_borders, "radius")} 0;

    word-break: normal;
    overflow-wrap: break-word;

    code {
        font-size: 1em;
    }
}

code {
    @extend %_normalize;

    // This could be a bit counterintuitive and burden the codebase a bit, look into it again?
    padding: calc(#{map.get($_box-spacing, "padding")} / 4) calc(#{map.get($_box-spacing, "padding")} / 2);

    // No border color by default and fore color is the default for text, can be altered manually.
    @include stdlib.box-shadow(map.get($_borders, "shadow"));
    border-radius: map.get($_borders, "radius");

    background: var(--code-back-color, #{map.get($_colors, "back")}); // Allows live color tunning
    color: var(--code-fore-color, #{map.get($_colors, "fore")}); // Allows live color tunning

    a:link,
    a:visited {
        color: var(--link-color, #{map.get($_colors, "fore")}); // Allows live color tunning
    }
}

kbd {
    @extend %_normalize;

    // This could be a bit counterintuitive and burden the codebase a bit, look into it again?
    padding: calc(#{map.get($_box-spacing, "padding")} / 4) calc(#{map.get($_box-spacing, "padding")} / 2);

    // No border color by default and fore color is the default for text, can be altered manually.
    @include stdlib.box-shadow(map.get($_borders, "shadow"));
    border-radius: map.get($_borders, "radius");

    background: var(--kbd-back-color, #{map.get($_colors, "back")}); // Allows live color tunning
    color: var(--kbd-fore-color, #{map.get($_colors, "fore")}); // Allows live color tunning
}

samp {
    @extend %_normalize;
    font-style: inherit;
}

var {
    @extend %_normalize;
    font-style: italic;
}
