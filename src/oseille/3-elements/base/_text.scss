//
// Use the HTML inline text semantic to define the meaning, structure, or style of a word, line, or
// any arbitrary piece of text.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use 'sass:map';
@use '../../2-settings/colors' as colors;
@use '../../2-settings/fonts' as fonts;
@use '../../2-settings/borders' as borders;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

// Box model
//
// Keys:
//   - top: <sup> top position
//   - bottom: <sub> bottom position
$_box-model: (
    'top': -0.5em,
    'bottom': -0.25em,
) !default;

// Font weight for <b> and <strong>
$_bold-font-weight: 700 !default;

// Opacity for input elements when disabled.
$_disabled-opacity: 0.75 !default;

// Fix for elements inside headings not displaying properly.
@mixin normalize_small {
    border: 0;
    font-family: inherit;
    font-size: var(--smaller, #{fonts.get-size('small')});
    margin: 0;
    padding: 0;
}

@mixin normalize {
    border: 0;
    font-size: 1em;
    margin: 0;
    padding: 0;
}

// Prevent element from affecting the line height in all browsers.
@mixin normalize-line-height {
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

// default link style
@mixin style-link {
    background-color: var(--link-back-color, transparent);
    color: var(--link-color, colors.get('link'));
    &:hover,
    &:active {
        background-color: var(--link-back-hover-color, transparent);
        border-top: 1px solid currentColor;
        border-bottom: 1px solid currentColor;
        color: var(--link-hover-color, colors.get('link'));
        outline: transparent solid; // We remove it but we provide alternative styling.
        -webkit-text-decoration: none;
        text-decoration: none;
    }
    &:focus {
        outline: var(--link-focus-color, colors.get('link')) solid 0.125rem;
        outline-offset: 0.0625em;
        text-decoration: none;
    }
}

/* Inline text semantic styling */

a {
    @include normalize;

    font-family: inherit; // Fix for elements inside headings not displaying properly.
    -webkit-text-decoration: underline solid currentColor;
    text-decoration: underline solid currentColor;

    // Selects any element that would be matched by :link or :visited
    // Buttons have an another style.
    &:not([class~='button']):not([role='button']):-webkit-any-link {
        @include style-link;
    }

    &:not([class~='button']):not([role='button']):-moz-any-link {
        @include style-link;
    }

    &:not([class~='button']):not([role='button']):any-link {
        @include style-link;
    }
}

abbr[title] {
    @include normalize;

    border-bottom: none solid transparent; // Remove bottom border in Firefox 39- & Chrome 57-
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted; // Opinionated style-fix for all browsers.
}

b,
strong {
    @include normalize;

    font-weight: $_bold-font-weight;
}

data {
    @include normalize;

    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted; // Opinionated style-fix for all browsers.

    &:hover::after {
        content: ' (ID ' attr(value) ')';
        font-size: 0.7em;
    }
}

@supports (cursor: help) {
    abbr[title] {
        cursor: help;
    }

    data {
        cursor: help;
    }
}

// Fix for elements inside headings not displaying properly.
del,
em,
i,
ins,
span,
u {
    @include normalize;
}

s {
    @include normalize;

    // The presence of the s element is not announced by most screen reading technology
    // in its default configuration. It can be made to be announced by using the CSS
    // content property, along with the ::before and ::after pseudo-elements.
    &::before,
    &::after {
        height: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
        width: 1px;
        -webkit-clip-path: inset(100%);
        clip-path: inset(100%);
    }

    &::before {
        content: ' [start of stricken text] ';
    }

    &::after {
        content: ' [end of stricken text] ';
    }
}

small {
    @include normalize_small;
}

sub {
    @include normalize_small;
    @include normalize-line-height;

    bottom: map.get($_box-model, 'bottom');
}

sup {
    @include normalize_small;
    @include normalize-line-height;

    top: map.get($_box-model, 'top');
}

.text-centered {
    text-align: center;
}

.text-justified {
    text-align: justify;
}

.text-left-aligned {
    text-align: left;
}

.text-right-aligned {
    text-align: right;
}
