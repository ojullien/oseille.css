//
// Sectioning root using top-level elements
//
// You may override the values of the colors and fonts variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use '../../2-settings/colors' as colors;
@use '../../2-settings/fonts' as fonts;

/* Top level styling */

html {
    margin: 0;
    padding: 0;
    border: 0;

    font-size: fonts.get-size('accessible');
    line-height: fonts.get-line-spacing('main');

    // Prevent adjustments of font size after orientation changes in mobile.
    @supports ((text-size-adjust: 100%) or (-moz-text-size-adjust: 100%) or (-webkit-text-size-adjust: 100%)) {
        -webkit-text-size-adjust: 100%;
        -moz-text-size-adjust: 100%;
        text-size-adjust: 100%;
    }

    @supports (text-rendering: optimizeLegibility) {
        text-rendering: optimizeLegibility;
    }

    @supports (scroll-behavior: smooth) {
        scroll-behavior: smooth;
    }
}

body {
    margin: 0;
    padding: 0;
    border: 0;
    color: var(--fore-color, colors.get('fore'));
    background-color: var(--back-color, colors.get('back'));
    font-family: fonts.get-stack('base');
    font-size: fonts.get-size('body');
    --smaller: #{fonts.get-size('small')};
    --fore-color: #{colors.get('fore')};
    --back-color: #{colors.get('back')};

    @supports (font-size-adjust: 1) {
        font-size-adjust: 0.5;
    }
}

*,
::after,
::before {
    -webkit-box-sizing: inherit;
    -moz-box-sizing: inherit;
    box-sizing: inherit;
}
