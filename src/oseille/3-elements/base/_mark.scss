//
// The HTML Mark Text element (<mark>) represents text which is marked or highlighted for reference or notation
// purposes, due to the marked passage's relevance or importance in the enclosing context.
//
// You may override the values of the colors, borders and fonts variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use 'sass:map';
@use '../../1-tools/box-shadow' as boxshadow;
@use '../../2-settings/colors' as colors;
@use '../../2-settings/fonts' as fonts;
@use '../../2-settings/borders' as borders;
@use '../../2-settings/box-model' as boxmodel;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

// Classnames
//
// Keys:
//   - mark: inline-block <mark>
//   - secondary: secondary <mark> color variant.
//   - tertiary: tertiary <mark> color variant.
//   - tag: padding and border radius for tag <mark> size variant.
$_classnames: (
    'mark': 'inline-block',
    'secondary': 'secondary',
    'tertiary': 'tertiary',
    'tag': 'tag',
) !default;

/* Mark styling*/

mark {
    margin: 0;
    padding: calc(#{boxmodel.get('padding')} / 4) calc(#{boxmodel.get('padding')} / 2);

    border: 0;
    border-radius: borders.get('radius');

    @include boxshadow.box-shadow(borders.get('shadow'));

    background: var(--primary-color, colors.get('primary'));
    color: var(--back-color, colors.get('back'));

    font-size: fonts.get-size('mark');
    line-height: fonts.get-line-spacing('mark');

    &.#{map.get($_classnames, 'mark')} {
        display: inline-block;
        // This is hardcoded, as we want inline-block <mark> elements to be styled as normal pieces of text, instead of look small and weird.
        font-size: 1em;
        // Line height is reset to the normal line-height.
        line-height: fonts.get-line-spacing('main');
        padding: calc(#{boxmodel.get('padding')} / 2) #{boxmodel.get('padding')};
    }

    &.#{map.get($_classnames, 'tag')} {
        padding: calc(#{boxmodel.get('padding')} / 2) #{boxmodel.get('padding')};
        border-radius: 1em;
    }

    &.#{map.get($_classnames, 'secondary')} {
        background: var(--secondary-color, colors.get('secondary'));
    }

    &.#{map.get($_classnames, 'tertiary')} {
        background: var(--tertiary-color, colors.get('tertiary'));
        color: var(--fore-color, colors.get('fore'));
    }

    // The presence of the mark element is not announced by most screen reading technology
    // in its default configuration. It can be made to be announced by using the CSS
    // content property, along with the ::before and ::after pseudo-elements.
    &:before,
    &:after {
        clip: rect(1px, 1px, 1px, 1px);
        height: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
        width: 1px;
        @supports ((clip-path: inset(100%)) or (-webkit-clip-path: inset(100%))) {
            -webkit-clip-path: inset(100%);
            clip-path: inset(100%);
        }
    }

    &:before {
        content: ' [highlight start] ';
    }

    &:after {
        content: ' [highlight end] ';
    }
}
