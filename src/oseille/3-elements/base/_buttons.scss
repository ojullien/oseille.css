//
// The HTML <button> element represents a clickable button, used to submit forms or anywhere in a document for
// accessible, standard button functionality. By default, HTML buttons are presented in a style resembling the
// platform the user agent runs on, but you can change buttons’ appearance with CSS.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use 'sass:map';
@use '../../1-tools/box-shadow' as boxshadow;
@use '../../2-settings/colors' as colors;
@use '../../2-settings/fonts' as fonts;
@use '../../2-settings/borders' as borders;
@use '../../2-settings/box-model' as boxmodel;
@use '../../2-settings/responsive' as breakpoints;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variables’ default values.
// @link: https://sass-lang.com/documentation/variables

// Mobile breakpoint for button groups.
$_mobile-breakpoint: breakpoints.get('medium') - 1px;

// Classnames
//
// Keys:
//   - button: elements styled as buttons
//   - group: button groups
$_classnames: (
    'button': 'button',
    'group': 'button-group',
) !default;

// Opacity for input elements when disabled.
$_disabled-opacity: 0.75 !default;

// Button color variant mixin:
//  $fore: Text color for button variant.
//  $back: Background color for button variant.
//  $back-hover: Background color for button variant (hover).
//  $border: Border color for button variant.
//  $border-hover: Border color for button variant (hover).
//  $border-focus: Border color for button variant (focus).
@mixin makeColorVariant($fore, $back, $border, $back-hover, $border-hover, $border-focus) {
    color: var(--button-fore-color, #{$fore});
    background-color: var(--button-back-color, #{$back});

    @if $border != none {
        border-color: var(--button-border-color, #{$border});
    }

    &:hover {
        background-color: var(--button-hover-back-color, #{$back-hover});
        @if $border-hover != none {
            border-color: var(--button-border-hover-color, #{$border-hover});
        }
    }

    &:focus {
        @if $border-focus != none {
            box-shadow: 0 0 0 5px var(--button-border-focus-color, #{$border-focus});
        }
    }
}

/* Button and button-like styling */

// Different elements are styled based on the same set of rules.
// Reset for Firefox focusing on button elements.
/*
button::-moz-focus-inner,
[type='button']::-moz-focus-inner,
[type='reset']::-moz-focus-inner,
[type='submit']::-moz-focus-inner {
    border-style: none;
    padding: 0;
}
*/

// Remove the additional ':invalid' styles in Firefox.
// See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737
:-moz-ui-invalid {
    box-shadow: none;
}

// Change font properties to 'inherit' in Safari.
::-webkit-file-upload-button {
    font: inherit;
}

// Fixes for Android 4, iOS and Safari.
@supports ((-webkit-appearance: button) or (-moz-appearance: button)) {
    button,
    [type='button'],
    [type='submit'],
    [type='reset'] {
        -moz-appearance: button;
        -webkit-appearance: button;
    }
}

/* Button styling */

.button {
    display: inline-block;
    vertical-align: middle;

    text-align: center;
    align-items: center; // If the container is flex or grid.
    justify-content: center; // If the container is flex.

    --button-padding: #{boxmodel.get('padding')} calc(#{fonts.get-line-spacing('main')} * #{boxmodel.get('padding')});
    padding: var(--button-padding);
    margin: boxmodel.get('margin');

    font: inherit;
    font-size: 1em;

    text-decoration: none;

    cursor: pointer;

    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;

    background-color: var(--button-back-color, transparent);
    color: var(--button-fore-color, #{colors.get('fore')});

    border: borders.get('width-alt') solid var(--button-border-color, #{colors.get('fore')});
    border-radius: 0;

    &:hover {
        outline: solid transparent;
        background-color: var(--button-back-hover-color, #{colors.get('back-alt')});
        color: var(--button-fore-hover-color, #{colors.get('fore-alt')});
        border-color: var(--button-border-hover-color, #{colors.get('back-alt')});
        //transform: scale(1.05); // Accessibility
    }

    &:focus {
        outline: 4px solid var(--button-outline-focus-color, #{colors.get('border-darkest')});
        background-color: var(--button-back-hover-color, #{colors.get('back-alt')});
        color: var(--button-fore-hover-color, #{colors.get('fore-alt')});
        border-color: var(--button-border-hover-color, #{colors.get('back-alt')});
    }

    // Size variants
    &.small {
        --button-padding: calc(0.5 * #{boxmodel.get('padding')}) calc(0.75 * #{boxmodel.get('padding')});
    }

    &.large {
        --button-padding: calc(1.5 * #{boxmodel.get('padding')}) calc(2 * #{boxmodel.get('padding')});
    }
}

button {
    @extend .button;

    overflow: visible; // Show the overflow in IE.
    text-transform: none; // Remove inheritance of text-transform in Edge, Firefox, and IE.
}

// Input button styling

[type='button'],
[type='submit'],
[type='reset'] {
    @extend .button;
}

// Anchor button-like styling

//a.button,
//a[role='button'] {
//    @extend .button;
//}

// Role button-like styling

[role='button'] {
    @extend .button;
}

// Color and border styling

// Disabled styling button elements.
// It is a bad practice to disable buttons. Disabling the button prevents our chance to tell the user what is wrong.
// The user keeps clicking the button and is totally in the dark why nothing happens. Keep the button enabled.
// Let the user click the button. Then show the message why it can’t proceed.

button,
[type='button'],
[type='submit'],
[type='reset'],
.button,
[role='button'] {
    // .button[disabled] is actually higher specificity than a.button, so no need for more than that
    &:disabled,
    &[aria-disabled='true'],
    &[disabled] {
        //pointer-events: none;
        @supports (cursor: not-allowed) {
            cursor: not-allowed;
        }
        @supports (filter: grayscale(60%)) {
            filter: grayscale(60%);
        }
        opacity: $_disabled-opacity;
        transform: none !important;
    }
}

/* Button group styling. */
/*
.#{map.get($_classnames, 'group')} {
    display: flex;

    border: borders.get('width') solid var(--button-group-border-color, #{colors.get('border-lightest')});
    border-radius: borders.get('radius');

    margin: boxmodel.get('margin');

    @include boxshadow.box-shadow(borders.get('shadow'));

    & > button,
    [type='button'],
    & > [type='submit'],
    & > [type='reset'],
    & > .button,
    & > [role='button'] {
        margin: 0;
        max-width: 100%;
        flex: 1 1 auto;
        text-align: center;
        border: 0;
        border-radius: 0;
        box-shadow: none;
    }

    & > :not(:first-child) {
        border-left: borders.get('width') solid var(--button-group-border-color, #{colors.get('border-lightest')});
    }

    // Responsiveness for button groups
    @media screen and (max-width: #{$_mobile-breakpoint}) {
        flex-direction: column;
        & > :not(:first-child) {
            border: 0; // Reapply to remove the left border from elements.
            border-top: borders.get('width') solid var(--button-group-border-color, #{colors.get('border-lightest')});
        }
    }
}
*/
