//
// Buttons are used to trigger an action or event (i.e. submitting a form, opening a dialog, canceling an action, or deleting an item).
// Buttons are not used to open webpages, instead use Links.
//
// We are styling the semantic <button> or <input type=”button”> elements only.
// Those two elements are proper buttons, are focusable, have correct key events by default and the correct button role.
// <button> supports HTML content, <input type=”button”> supports only text content.
//
// If using role="button" or other elements instead of the semantic <button> or <input type="button"> elements,
// you will need to make the element focusable and have to define event handlers for click and keydown events,
// including the Enter and Space keys, in order to process the user's input.
//
// Variables.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See /flavors/oseille.scss and the /2-settings/*.scss files.
//

@use "sass:map";
@use "../../2-settings/colors" as colors;
@use "../../2-settings/fonts" as fonts;
@use "../../2-settings/borders" as borders;
@use "../../2-settings/box-model" as boxmodel;
@use "../../2-settings/responsive" as breakpoints;

//
// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variables’ default values.
// @link: https://sass-lang.com/documentation/variables

// Mobile breakpoint for button groups.
$_mobile-breakpoint: breakpoints.get("medium") - 1px;

// Should variants be included? (boolean)
$_include-scale-on-hover-variant: true !default;
$_include-shadowed-variant: true !default;
$_include-feel-pressed-variant: true !default;

/* Button styling */

@mixin button {
    --button-padding: #{boxmodel.get("padding")} calc(#{fonts.get-line-spacing("main")} * #{boxmodel.get("padding")});

    @content;
    background-color: var(--button-back-color, transparent);
    border: borders.get("medium") solid var(--button-border-color, #{colors.get("fore")});
    border-radius: var(--button-border-radius, 0);
    color: var(--button-fore-color, #{colors.get("fore")});
    cursor: pointer;
    display: inline-block;
    font: inherit;
    margin: boxmodel.get("margin");
    padding: var(--button-padding);
    text-align: center;
    text-decoration: none;
    transition: all 0.125s linear;
    -moz-user-select: none;
    -webkit-user-select: none;
    user-select: none;

    &:hover {
        background-color: var(--button-back-hover-color, #{colors.get("back-alt")});
        border-color: var(--button-border-hover-color, #{colors.get("back-alt")});
        color: var(--button-fore-hover-color, #{colors.get("fore-alt")});
        outline: transparent solid;
    }

    &:focus {
        background-color: var(--button-back-focus-color, #{colors.get("back-alt")});
        border-color: var(--button-border-focus-color, #{colors.get("back-alt")});
        color: var(--button-fore-focus-color, #{colors.get("fore-alt")});
        outline: transparent solid;
    }

    &:active {
        background-color: var(--button-back-active-color, transparent);
        border-color: var(--button-border-active-color, #{colors.get("fore")});
        color: var(--button-fore-active-color, #{colors.get("fore")});
    }

    // Size variants
    &.small {
        --button-padding: calc(0.5 * #{boxmodel.get("padding")}) calc(0.75 * #{boxmodel.get("padding")});
    }

    &.large {
        --button-padding: calc(1.5 * #{boxmodel.get("padding")}) calc(2 * #{boxmodel.get("padding")});
    }

    // Disabled styling button elements.
    // It is a bad practice to disable buttons. Disabling the button prevents our chance to tell the user what is wrong.
    // The user keeps clicking the button and is totally in the dark why nothing happens. Keep the button enabled.
    // Let the user click the button. Then show the message why it can’t proceed.
    &:disabled,
    &[disabled] {
        cursor: not-allowed;
    }
}

@mixin scale-on-hover-variant {
    border-radius: var(--button-border-radius, 0);

    &:hover,
    &:focus {
        transform: scale(1.1);
    }

    &:active {
        transform: scale(0.9);
    }
}

@mixin shadowed-variant {
    &:hover,
    &:focus {
        box-shadow:
            0 0 0 (1.5rem * 0.125) var(--button-fore-hover-color, #{colors.get("fore-alt")}),
            0 0 0 (1.5rem * 0.25) var(--button-back-hover-color, #{colors.get("back-alt")});
    }

    &:active {
        box-shadow:
            0 0 0 (1.5rem * 0.125) var(--button-fore-active-color, #{colors.get("back-alt")}),
            0 0 0 (1.5rem * 0.25) var(--button-back-active-color, #{colors.get("fore-alt")});
    }
}

@mixin feel-pressed-variant {
    &:active {
        transform: scale(0.85);
    }
}

// Button and input of type button styling

button,
input[type="button"],
input[type="submit"],
input[type="reset"] {
    @include button {
        -webkit-appearance: button; // Correct the inability to style clickable types in iOS and Safari.
        appearance: button;
    }
}

button {
    overflow: visible; // Show the overflow in IE and Edge
    text-transform: none; // Remove inheritance of text-transform in Edge, Firefox and IE.
}

// Variants

@if $_include-scale-on-hover-variant {
    button,
    input[type="button"],
    input[type="submit"],
    input[type="reset"] {
        &.scale-on-hover-variant {
            @include scale-on-hover-variant;
        }
    }
}

@if $_include-shadowed-variant {
    button,
    input[type="button"],
    input[type="submit"],
    input[type="reset"] {
        &.shadowed-variant {
            @include shadowed-variant;
        }
    }
}

@if $_include-feel-pressed-variant {
    button,
    input[type="button"],
    input[type="submit"],
    input[type="reset"] {
        &.active-effect {
            @include feel-pressed-variant;
        }
    }
}

// Button group styling

.button-group {
    border: borders.get("thin") solid var(--button-group-border-color, #{colors.get("border")});
    border-radius: borders.get("radius");
    display: flex;
    margin: boxmodel.get("margin");

    > button,
    > input[type="button"],
    > input[type="submit"],
    > input[type="reset"] {
        border: 0;
        border-radius: 0;
        box-shadow: none;
        flex: auto;
        margin: 0;
        max-width: 100%;
        text-align: center;
    }

    > :not(:first-child) {
        border-left: borders.get("thin") solid var(--button-group-border-color, #{colors.get("border")});
    }

    // Responsiveness for button groups

    @media screen and (max-width: #{$_mobile-breakpoint}) {
        flex-direction: column;

        > :not(:first-child) {
            border: 0; // Reapply to remove the left border from elements.
            border-top: borders.get("thin") solid var(--button-group-border-color, #{colors.get("border")});
        }
    }
}

// Styling of a button of an <input> of type="file".
// see: https://developer.mozilla.org/en-US/docs/Web/CSS/::file-selector-button
// see: https://jsfiddle.net/4cwpLvae/
// see: https://stackoverflow.com/questions/572768/styling-an-input-type-file-button

input[type="file"]::-ms-browse {
    @include button;
}

input[type="file"]::-webkit-file-upload-button {
    @include button {
        -webkit-appearance: button; // Correct the inability to style clickable types in iOS and Safari.
        appearance: button;
    }
}

input[type="file"]::file-selector-button {
    @include button {
        -webkit-appearance: button; // Correct the inability to style clickable types in iOS and Safari.
        appearance: button;
    }
}


// Reset for Firefox focusing on button elements.

button::-moz-focus-inner,
input[type="button"]::-moz-focus-inner,
input[type="reset"]::-moz-focus-inner,
input[type="submit"]::-moz-focus-inner,
input[type="file"]::-moz-focus-inne {
    border-style: none;
    padding: 0;
}

// Restore the focus styles unset by the previous rule.

button::-moz-focusring,
input[type="button"]::-moz-focusring,
input[type="reset"]::-moz-focusring,
input[type="submit"]::-moz-focusring,
input[type="file"]::-moz-focusring {
    outline: 1px dotted ButtonText;
}
