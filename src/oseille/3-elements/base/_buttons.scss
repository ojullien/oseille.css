//
// The HTML <button> element represents a clickable button, used to submit forms or anywhere in a document for
// accessible, standard button functionality. By default, HTML buttons are presented in a style resembling the
// platform the user agent runs on, but you can change buttons’ appearance with CSS.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//

@use "sass:map";
@use "../../2-settings/colors" as colors;
@use "../../2-settings/fonts" as fonts;
@use "../../2-settings/borders" as borders;
@use "../../2-settings/box-model" as boxmodel;
@use "../../2-settings/responsive" as breakpoints;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variables’ default values.
// @link: https://sass-lang.com/documentation/variables

// Mobile breakpoint for button groups.
$_mobile-breakpoint: breakpoints.get("medium") - 1px;

// Should variant be included? (boolean)
$_include-variant: true !default;

// Opacity for input elements when disabled.
$_disabled-opacity: 0.75 !default;

/* Button and button-like styling */

// Fixes for Android 4, iOS and Safari.

@supports (-webkit-appearance: button) or (-moz-appearance: button) {
    button,
    input[type="button"],
    input[type="submit"],
    input[type="reset"] {
        -webkit-appearance: button;
        -moz-appearance: button;
    }
}

// Button styling

%button {
    --button-padding: #{boxmodel.get("padding")} calc(#{fonts.get-line-spacing("main")} * #{boxmodel.get("padding")});

    background-color: var(--button-back-color, transparent);
    border: borders.get("medium") solid var(--button-border-color, #{colors.get("fore")});
    border-radius: 0;
    color: var(--button-fore-color, #{colors.get("fore")});
    cursor: pointer;
    display: inline-block;
    font: inherit;
    font-size: 1em;
    margin: boxmodel.get("margin");
    padding: var(--button-padding);
    text-align: center;
    text-decoration: none;
    transition: all 0.125s linear;
    -moz-user-select: none;
    -webkit-user-select: none;
    user-select: none;

    &:hover {
        background-color: var(--button-back-hover-color, #{colors.get("back-alt")});
        border-color: var(--button-border-hover-color, #{colors.get("back-alt")});
        color: var(--button-fore-hover-color, #{colors.get("fore-alt")});
        outline: transparent solid;
    }

    &:focus {
        background-color: var(--button-back-focus-color, #{colors.get("back-alt")});
        border-color: var(--button-border-focus-color, #{colors.get("back-alt")});
        color: var(--button-fore-focus-color, #{colors.get("fore-alt")});
        outline: transparent solid;
    }

    &:active {
        background-color: var(--button-back-active-color, transparent);
        border-color: var(--button-border-active-color, #{colors.get("fore")});
        color: var(--button-fore-active-color, #{colors.get("fore")});
    }

    // Size variants
    &.small {
        --button-padding: calc(0.5 * #{boxmodel.get("padding")}) calc(0.75 * #{boxmodel.get("padding")});
    }

    &.large {
        --button-padding: calc(1.5 * #{boxmodel.get("padding")}) calc(2 * #{boxmodel.get("padding")});
    }

    // Disabled styling button elements.
    // It is a bad practice to disable buttons. Disabling the button prevents our chance to tell the user what is wrong.
    // The user keeps clicking the button and is totally in the dark why nothing happens. Keep the button enabled.
    // Let the user click the button. Then show the message why it can’t proceed.
    &:disabled,
    &[aria-disabled="true"],
    &[disabled] {
        cursor: not-allowed;
        filter: grayscale(60%);
        opacity: $_disabled-opacity;
    }
}

button {
    @extend %button;

    overflow: visible; // Show the overflow in IE.
    text-transform: none; // Remove inheritance of text-transform in Edge, Firefox, and IE.
}

// Input button styling

input[type="button"],
input[type="submit"],
input[type="reset"] {
    @extend %button;
}

// Change font properties to 'inherit' in Safari.
input[type="file"]::-webkit-file-upload-button {
    @extend %button;
    font: inherit;
}

// see: https://developer.mozilla.org/en-US/docs/Web/CSS/::file-selector-button
input[type="file"]::file-selector-button {
    @extend %button;
}

// Class button-like styling

.button {
    @extend %button;
}

// Role button-like styling

[role="button"] {
    @extend %button;
}

// Anchor button-like styling. Overrides a:link

a[role="button"],
a.button {
    color: var(--button-fore-color, #{colors.get("fore")});

    &:focus {
        outline-offset: unset;
    }

    // .button[disabled] is actually higher specificity than a.button, so no need for more than that
}

// Variants

@if $_include-variant {
    .scale-on-hover-variant {
        border-radius: borders.get("radius");
        &:hover,
        &:focus {
            transform: scale(1.1);
        }
        &:active {
            transform: scale(0.9);
        }
    }

    .shadowed-variant {
        &:hover,
        &:focus {
            box-shadow:
                0 0 0 (1.5rem * 0.125) var(--button-fore-hover-color, #{colors.get("fore-alt")}),
                0 0 0 (1.5rem * 0.25) var(--button-back-hover-color, #{colors.get("back-alt")});
        }
        &:active {
            box-shadow:
                0 0 0 (1.5rem * 0.125) var(--button-fore-active-color, #{colors.get("back-alt")}),
                0 0 0 (1.5rem * 0.25) var(--button-back-active-color, #{colors.get("fore-alt")});
        }
    }
}

.active-effect {
    &:active {
        transform: scale(0.98);
    }
}

/* Button group styling. */

.button-group {
    border: borders.get("thin") solid var(--button-group-border-color, #{colors.get("border")});
    border-radius: borders.get("radius");
    display: flex;
    margin: boxmodel.get("margin");

    > button,
    > input[type="button"],
    > input[type="submit"],
    > input[type="reset"],
    > .button,
    > [role="button"] {
        border: 0;
        border-radius: 0;
        box-shadow: none;
        flex: auto;
        margin: 0;
        max-width: 100%;
        text-align: center;
    }

    > :not(:first-child) {
        border-left: borders.get("thin") solid var(--button-group-border-color, #{colors.get("border")});
    }

    // Responsiveness for button groups

    @media screen and (max-width: #{$_mobile-breakpoint}) {
        flex-direction: column;

        > :not(:first-child) {
            border: 0; // Reapply to remove the left border from elements.
            border-top: borders.get("thin") solid var(--button-group-border-color, #{colors.get("border")});
        }
    }
}

// Reset for Firefox focusing on button elements.
button::-moz-focus-inner,
input[type="button"]::-moz-focus-inner,
input[type="reset"]::-moz-focus-inner,
input[type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0;
}
