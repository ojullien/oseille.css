//
// The HTML <input> element is used to create interactive controls for web-based forms in order to accept
// data from the user; a wide variety of types of input data and control widgets are available, depending
// on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML
// due to the sheer number of combinations of input types and attributes.
//
// You may override the values of the colors, borders and fonts variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use 'sass:map';
@use '../../2-settings/colors' as colors;
@use '../../2-settings/fonts' as fonts;
@use '../../2-settings/borders' as borders;
@use '../../2-settings/box-model' as boxmodel;
@use '../../2-settings/responsive' as breakpoints;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

// Opacity for input elements when disabled.
$_disabled-opacity: 0.75 !default;

// Should fluid input groups be included? (boolean)
$_include-fluid-input-group: true !default;

// Mobile breakpoint for button groups.
$_mobile-breakpoint: breakpoints.get('medium') - 1px;

// Classnames
//
// Keys:
//   - group: input groups
//   - fluid: fluid input groups
//   - vertical: vertical input groups
$_classnames: (
    'group': 'input-group',
    'fluid': 'fluid',
    'vertical': 'vertical',
) !default;

// Styling for checkboxes and radio buttons:
@mixin normalizeRadioCheckbox {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    position: relative;
    height: calc(#{fonts.get-size('input')} + #{boxmodel.get('padding')} / 2);
    width: calc(#{fonts.get-size('input')} + #{boxmodel.get('padding')} / 2);
    vertical-align: text-bottom;
    // Remove padding added from previous styles.
    padding: 0;
    // Override fluid input-group styling.
    flex-basis: calc(#{fonts.get-size('input')} + #{boxmodel.get('padding')} / 2) !important;
    // Using with fluid input-groups is not recommended.
    flex-grow: 0 !important;
    &:checked:before {
        position: absolute;
    }
}

// Disabled styling for input and button elements.
@mixin styleDisable {
    &:disabled,
    &[disabled] {
        @supports (cursor: not-allowed) {
            cursor: not-allowed;
        }
        @supports (filter: grayscale(60%)) {
            filter: grayscale(60%);
        }
        opacity: $_disabled-opacity;
        transform: none;
    }
}

/* Styling for input */

input {
    overflow: visible; // Show overflow in Edge.

    background: var(--back-color, #{colors.get('back')});
    color: var(--fore-color, #{colors.get('fore')});
    border: borders.get('width-alt') solid var(--border-color, #{colors.get('border')});

    font-family: inherit;
    font-size: fonts.get-size('input');
    line-height: normal;
    margin: 0;

    @include styleDisable;
}

/* Common textual input styling. */
// - Avoid using box-shadow with these.
input:not([type]),
[type='text'],
[type='email'],
[type='number'],
[type='search'],
[type='password'],
[type='url'],
[type='tel'],
[type='checkbox'],
[type='radio'],
textarea,
select {
    box-sizing: border-box;
    // Background, color and border should not be unassigned, as the browser defaults will apply.
    background: var(--back-color, #{colors.get('back')});
    color: var(--fore-color, #{colors.get('fore')});
    border: borders.get('width-alt') solid var(--border-color, #{colors.get('border')});
    border-radius: borders.get('radius');
    margin: calc(#{boxmodel.get('margin')} / 2);
    padding: boxmodel.get('padding') calc(#{fonts.get-line-spacing('main')} * #{boxmodel.get('padding')});
}

/* Styling for checkbox */

[type='checkbox'] {
    @include normalizeRadioCheckbox;

    &:checked:before {
        content: '\2713';
        font-family: sans-serif;
        font-size: calc(#{fonts.get-size('input')} + #{boxmodel.get('padding')} / 2);
        top: calc(0rem - #{boxmodel.get('padding')});
        left: calc(#{boxmodel.get('padding')} / 4);
    }
}

/* Styling for radio */

[type='radio'] {
    @include normalizeRadioCheckbox;

    border-radius: 100%;

    &:checked:before {
        border-radius: 100%;
        content: '';
        top: calc(1px + #{boxmodel.get('padding')} / 2);
        left: calc(1px + #{boxmodel.get('padding')} / 2);
        background: colors.get('back-alt');
        width: 0.5rem;
        height: 0.5rem;
    }
}

/* Styling for number */

// Correct the cursor style of increment and decrement buttons in Chrome.
[type='number']::-webkit-inner-spin-button,
[type='number']::-webkit-outer-spin-button {
    height: auto;
}

/* Styling for search */

// Correct style in Chrome and Safari.
[type='search'] {
    @supports (-webkit-appearance: textfield) {
        -webkit-appearance: textfield;
    }
    @supports (outline-offset: -2px) {
        outline-offset: -2px;
    }
}

@supports (-webkit-appearance: none) {
    [type='search']::-webkit-search-cancel-button,
    [type='search']::-webkit-search-decoration {
        -webkit-appearance: none;
    }
}

/* Styling for textarea */

textarea {
    @include styleDisable;
}

/* Styling for select */

select {
    // Overflowing parent container.
    max-width: 100%;

    @include styleDisable;
}

/* Styling for option */

option {
    // Overflowing parent container.
    max-width: 100%;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

// Placeholder styling (keep browser-specific definitions separated, they do not play well together).

:placeholder-shown {
    color: var(--fore-color, #{colors.get('fore')});
}

::-ms-placeholder {
    color: var(--fore-color, #{colors.get('fore')});
    opacity: 0.54;
}

/* Hover, focus, disabled, readonly, invalid styling for common textual inputs. */
input:not([type='button']):not([type='submit']):not([type='reset']),
textarea,
select {
    &:hover,
    &:focus {
        border-color: var(--input-border-hover-color, #{colors.get('sidebar-alt')});
        box-shadow: none;
    }
    &:invalid,
    &:focus:invalid {
        border-color: var(--input-border-hover-color, #{colors.get('red')});
        box-shadow: none;
    }
    &[readonly] {
        @supports (filter: grayscale(60%)) {
            filter: grayscale(60%);
        }
        opacity: $_disabled-opacity;
    }
}

/* Input group styling. */

.#{map.get($_classnames,'group')} {
    display: inline-block;
    // Fluid input groups
    @if $_include-fluid-input-group {
        &.#{map.get($_classnames,'fluid')} {
            display: flex;
            align-items: center;
            justify-content: center;
            & > input {
                max-width: 100%;
                flex-grow: 1;
                flex-basis: 0;
            }
            // On mobile
            @media screen and (max-width: #{$_mobile-breakpoint}) {
                align-items: stretch;
                flex-direction: column;
            }
        }
        // Vertical input groups
        &.#{map.get($_classnames,'vertical')} {
            display: flex;
            align-items: stretch;
            flex-direction: column;
            & > input {
                max-width: 100%;
                flex-grow: 1;
                flex-basis: 0;
            }
        }
    }
}
