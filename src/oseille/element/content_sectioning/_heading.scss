//
// Content sectioning elements allow you to organize the document content into logical pieces.
// Use the sectioning elements to create a broad outline for your page content, including header and footer navigation,
// and heading elements to identify sections of content.
//
// The HTML <h1>–<h6> elements represent six levels of section headings. <h1> is the highest section level and <h6>
// is the lowest.
//
@use 'sass:map';
@use 'sass:string';

// Variables.
//
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variables’ default values.
// @link: https://sass-lang.com/documentation/variables

// Basic box model
$_box-spacing: (
    // Margins: create extra space around an element.
        "margin": 0.5rem
) !default;

// Font stacks
$_font-stacks: (
    // Heading font stack
        "heading":
        (-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, "Helvetica Neue", Helvetica, sans-serif)
) !default;

// Font sizes
$_font-sizes: (
    // Font size for small element  ( <small>, <sub>, <sup>, <figcaption>)
        "small": 0.75em
) !default;

// Line heights
$_line-spacing: (
    // Line height for larger font sizes.
        "heading": 1.2,
    // Line height for subheading
        "subheading": 1.5
) !default;

// Main colors. WCAG Grading AAA.
$_colors: (
    // Text & foreground color
        "fore": inherit,
    // Background color
        "back": inherit,
    // Subheading foreground color
        "subheading-fore": inherit,
    // Subheading background color
        "subheading-back": inherit
) !default;

$_font-weight: 500 !default; // Font weight for headings
$_subheading-margin-top: 0; // Top margin of <small> elements in headings
$_heading-ratio: 1.19; // Ratio for headings (strictly unitless)

// @todo Add comment
@function buildFontSize($exponent, $ratio, $base: "1rem") {
    $sCalc: "";

    @if $exponent < 0 {
        $sCalc: " / #{$ratio}";
    } @else {
        @for $_ from 1 through $exponent {
            $sCalc: "#{$sCalc} * #{$ratio}";
        }
    }

    @return "calc(#{$base}#{$sCalc})";
}

/* Heading styling */

%_normalize {
    padding: 0;
    border: 0;

    font-family: map.get($_font-stacks, "heading");
    font-weight: $_font-weight;
    line-height: map.get($_line-spacing, "heading");

    margin: calc(#{map.get($_line-spacing, "heading")} * #{map.get($_box-spacing, "margin")}) map.get($_box-spacing, "margin");

    background: var(--heading-back-color, #{map.get($_colors, "back")}); // Allows live color tunning
    color: var(--heading-fore-color, #{map.get($_colors, "fore")}); // Allows live color tunning

    text-rendering: optimizeLegibility;

    small {
        display: block;

        @if $_subheading-margin-top != 0 {
            margin-top: $_subheading-margin-top;
        }

        line-height: map.get($_line-spacing, "subheading");

        background: var(--subheading-back-color, #{map.get($_colors, "subheading-back")}); // Allows live color tunning
        color: var(--subheading-fore-color, #{map.get($_colors, "subheading-fore")}); // Allows live color tunning
    }
}

h1 {
    @extend %_normalize;
    font-size: string.unquote(buildFontSize(4, $_heading-ratio));
}
h2 {
    @extend %_normalize;
    font-size: string.unquote(buildFontSize(3, $_heading-ratio));
}
h3 {
    @extend %_normalize;
    font-size: string.unquote(buildFontSize(2, $_heading-ratio));
}
h4 {
    @extend %_normalize;
    font-size: string.unquote(buildFontSize(1, $_heading-ratio));
}
h5 {
    @extend %_normalize;
    font-size: 1rem;
}
h6 {
    @extend %_normalize;
    font-size: string.unquote(buildFontSize(-1, $_heading-ratio));
}
