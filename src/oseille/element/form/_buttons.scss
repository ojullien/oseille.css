//
// The HTML <button> element represents a clickable button, used to submit forms or anywhere in a document for
// accessible, standard button functionality. By default, HTML buttons are presented in a style resembling the
// platform the user agent runs on, but you can change buttons’ appearance with CSS.
//
@use 'sass:map';
@use '../../default/stdlib';

// Variables.
//
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variables’ default values.
// @link: https://sass-lang.com/documentation/variables

// Basic box model.
//
// Keys:
//   - padding: creates extra space within an element.
//   - margin: create extra space around an element. We reduce the default web browsers margin.
$_box-spacing: (
    "padding": 0.5rem,
    "margin": 0.5rem,
) !default;

// Borders.
//
// Keys:
//   - radius: rounds the corners of an element's outer border edge.
//   - shadow: shadow effects around an element's frame.
//   - width: thickness of the border.
//   - width-alt: alternative thickness for more accessibility.
$_borders: (
    "radius": 0.125rem,
    "shadow": none,
    "width": 1px,
    "width-alt": 3px,
) !default;

// Main colors
//
// Keys:
//   - fore: text & foreground color
//   - back: background color
//   - border: border color.
//   - border-hover: color when hover.
//   - group-border: border color for button groups // See $primary-palette.border-lightest in default/color.scss
$_colors: (
    "fore": #121212,
    "back": #f8f8f8,
    "border": transparent,
    "border-hover": transparent,
    "group-border": #909090,
) !default;

// Primary colors palette.
//
// Keys:
//   - fore-*: text & foreground color
//   - back-*: background color
//   - border-*: border color
$_primary-palette: (
    "fore-darkest": #0e0e0e,
    "fore-darker": #282828,
    "fore-lighter": #414141,
    "fore-lightest": #898989,
    "back-darkest": #c6c6c6,
    "back-darker": #e0e0e0,
    "back-lighter": #f9f9f9,
    "back-lightest": #fcfcfc,
    "border-darkest": #1b1b1b,
    "border-darker": #353535,
    "border-lighter": #4e4e4e,
    "border-lightest": #909090,
) !default;

// Line height
//
// Keys:
//   - main: line height for most elements. Accessibility concerns: Use a minimum value of 1.5 for line-height for main paragraph content.
$_line-spacing: (
    "main": 1.5,
) !default;

// Breakpoints
//
// Keys:
//   - medium: medium/mobile screen breakpoint for grid
$_breakpoints: (
    "medium": 768px,
) !default;

// Private variables

// Mobile breakpoint for button groups.
$_mobile-breakpoint: map.get($_breakpoints, "medium") - 1px;

// Classnames
//
// Keys:
//   - button: elements styled as buttons
//   - group: button groups
$_classnames: (
    "button": "button",
    "group": "button-group",
);

// Opacity for input elements when disabled.
$_disabled-opacity: 0.75;

// Button size variant mixin:
//  $padding: The padding of the button variant.
//  $margin The margin of the button variant.
@mixin makeSizeVariant($padding, $margin) {
    padding: $padding;
    margin: $margin;
}

// Button color variant mixin:
//  $fore: Text color for button variant.
//  $back: Background color for button variant.
//  $back-hover: Background color for button variant (hover).
//  $border: Border color for button variant.
//  $border-hover: Border color for button variant (hover).
@mixin makeColorVariant($fore, $back, $border, $back-hover, $border-hover) {
    color: var(--button-fore-color, #{$fore});
    background: var(--button-back-color, #{$back});
    @if $border != none {
        border-color: var(--button-border-color, #{$border});
    }
    &:hover,
    &:focus {
        background: var(--button-hover-back-color, #{$back-hover});
        @if $border-hover != none {
            border-color: var(--button-border-hover-color, #{$border-hover});
        }
    }
}

/* Button and button-like styling */

// Different elements are styled based on the same set of rules.
// Reset for Firefox focusing on button elements.
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0;
}

// Fixes for Android 4, iOS and Safari.
@supports (-webkit-appearance: button) {
    button,
    html [type="button"],
    [type="reset"],
    [type="submit"] {
        -webkit-appearance: button;
    }
}

// Other fixes.
button {
    overflow: visible; // Show the overflow in IE.
    text-transform: none; // Remove inheritance of text-transform in Edge, Firefox, and IE.
}

button,
[type="button"],
[type="submit"],
[type="reset"],
a.#{map.get($_classnames, "button")},
label.#{map.get($_classnames, "button")},
.#{map.get($_classnames, "button")},
a[role="button"],
label[role="button"],
[role="button"] {
    display: inline-block;

    background: var(--button-back-color, #{map.get($_primary-palette, "back-darker")}); // Allows live color tunning
    color: var(--button-fore-color, #{map.get($_colors, "fore")}); // Allows live color tunning

    border: map.get($_borders, "width") solid var(--button-border-color, #{map.get($_colors, "border")});
    border-radius: map.get($_borders, "radius");

    padding: #{map.get($_box-spacing, "padding")} calc(#{map.get($_line-spacing, "main")} * #{map.get(
                    $_box-spacing,
                    "padding"
                )});
    margin: map.get($_box-spacing, "margin");

    font-size: 1em;

    text-decoration: none;

    @supports (cursor: pointer) {
        cursor: pointer;
    }

    transition: background 0.3s;

    &:hover,
    &:focus {
        background: var(--button-hover-back-color, #{map.get($_primary-palette, "back-darkest")});
        border-color: var(--button-border-hover-color, #{map.get($_colors, "border-hover")});
    }
}

button,
[type="button"],
[type="submit"],
[type="reset"],
.#{map.get($_classnames, "button")},
[role="button"] {
    // Color variants
    &.primary {
        @include makeColorVariant(
            #{map.get($_colors, "fore")},
            #{map.get($_primary-palette, "back-darker")},
            #{map.get($_primary-palette, "border-lighter")},
            #{map.get($_primary-palette, "back-darkest")},
            #{map.get($_primary-palette, "border-lighter")}
        );
    }

    &.secondary {
        @include makeColorVariant(
            #{map.get($_colors, "fore")},
            #{map.get($_colors, "back")},
            #{map.get($_primary-palette, "border-lighter")},
            #{map.get($_primary-palette, "back-darker")},
            #{map.get($_primary-palette, "border-lighter")}
        );
    }

    &.tertiary {
        @include makeColorVariant(
            #{map.get($_colors, "fore")},
            #{map.get($_colors, "back")},
            #{map.get($_colors, "border")},
            #{map.get($_primary-palette, "back-darker")},
            #{map.get($_colors, "border-hover")}
        );
    }

    &.inverse {
        @include makeColorVariant(
            #{map.get($_primary-palette, "back-darker")},
            #{map.get($_colors, "fore")},
            none,
            #{map.get($_primary-palette, "fore-lightest")},
            none
        );
    }

    // Size variants
    &.small {
        @include makeSizeVariant(
            calc(0.5 * #{map.get($_box-spacing, "padding")}) calc(0.75 * #{map.get($_box-spacing, "padding")}),
            map.get($_box-spacing, "margin")
        );
    }

    &.large {
        @include makeSizeVariant(
            calc(1.5 * #{map.get($_box-spacing, "padding")}) calc(2 * #{map.get($_box-spacing, "padding")}),
            map.get($_box-spacing, "margin")
        );
    }
}

// Disabled styling button elements.

button,
.#{map.get($_classnames, "button")},
[role="button"] {
    // .button[disabled] is actually higher specificity than a.button, so no need for more than that
    &:disabled,
    &[disabled] {
        @supports (cursor: not-allowed) {
            cursor: not-allowed;
        }
        opacity: $_disabled-opacity;
    }
}

/* Button group styling. */

.#{map.get($_classnames, "group")} {
    display: flex;

    border: map.get($_borders, "width") solid var(--button-group-border-color, #{map.get($_colors, "group-border")});
    border-radius: map.get($_borders, "radius");

    margin: map.get($_box-spacing, "margin");

    @include stdlib.box-shadow(map.get($_borders, "shadow"));

    & > button,
    [type="button"],
    & > [type="submit"],
    & > [type="reset"],
    & > .#{map.get($_classnames, "button")},
    & > [role="button"] {
        margin: 0;
        max-width: 100%;
        flex: 1 1 auto;
        text-align: center;
        border: 0;
        border-radius: 0;
        box-shadow: none;
    }

    & > :not(:first-child) {
        border-left: map.get($_borders, "width") solid
            var(--button-group-border-color, #{map.get($_colors, "group-border")});
    }

    // Responsiveness for button groups
    @media screen and (max-width: #{$_mobile-breakpoint}) {
        flex-direction: column;
        & > :not(:first-child) {
            border: 0; // Reapply to remove the left border from elements.
            border-top: map.get($_borders, "width") solid
                var(--button-group-border-color, #{map.get($_colors, "group-border")});
        }
    }
}
