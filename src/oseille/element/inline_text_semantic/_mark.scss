//
// The HTML Mark Text element (<mark>) represents text which is marked or highlighted for reference or notation
// purposes, due to the marked passage's relevance or importance in the enclosing context.
//
@use 'sass:map';
@use '../../default/stdlib';

// Variables.
//
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

$_colors: (
    // Text color for <mark>
        "fore": #f8f8f8,
    // Background colors for <mark>
        "primary": #215cca,
    // Background colors for <mark>
        "secondary": #e00000,
    // Background colors for <mark>
        "tertiary": #218003
) !default;

// Basic box model
$_box-spacing: (
    // Padding: creates extra space within an element.
        "padding": 0.5rem,
    // Margins: create extra space around an element.
        "margin": 0.5rem
) !default;

// Borders
$_borders: (
    // radius: rounds the corners of an element's outer border edge.
        "radius": 0.125rem,
    // shadow: adds shadow effects around an element's frame.
        "shadow": none
) !default;

$_line-spacing: (
    // Line height for most elements.
        "main": 1.5,
    // Line height for <mark>
        "mark": 1em
) !default;

// Font sizes
$_font-sizes: (
    // Font size for <mark>.
        "mark": 0.95em
) !default;

$_class-name: (
    // Class name for inline-block <mark>
        "mark": "inline-block",
    // Class name for secondary <mark> color variant.
        "secondary": "secondary",
    // Class name for tertiary <mark> color variant.
        "tertiary": "tertiary",
    // Class name, padding and border radius for tag <mark> size variant.
        "tag": "tag"
);

/* Mark styling*/

mark {
    margin: 0;
    padding: calc(#{map.get($_box-spacing, "padding")} / 4) calc(#{map.get($_box-spacing, "padding")} / 2);

    border: 0;
    border-radius: map.get($_borders, "radius");

    @include stdlib.box-shadow(map.get($_borders, "shadow"));

    background: map.get($_colors, "primary");
    color: map.get($_colors, "fore");

    font-size: map.get($_font-sizes, "mark");
    line-height: map.get($_line-spacing, "mark");

    &.#{map.get($_class-name, "mark")} {
        display: inline-block;
        // This is hardcoded, as we want inline-block <mark> elements to be styled as normal pieces of text, instead of look small and weird.
        font-size: 1em;
        // Line height is reset to the normal line-height from `core`. Also hardcoded for same reasons.
        line-height: map.get($_line-spacing, "main");
        padding: calc(#{map.get($_box-spacing, "padding")} / 2) #{map.get($_box-spacing, "padding")};
    }

    &.#{map.get($_class-name, "tag")} {
        padding: calc(#{map.get($_box-spacing, "padding")} / 2) #{map.get($_box-spacing, "padding")};
        border-radius: 1em;
    }

    &.#{map.get($_class-name, "secondary")} {
        background: map.get($_colors, "secondary");
    }

    &.#{map.get($_class-name, "tertiary")} {
        background: map.get($_colors, "tertiary");
    }

    // The presence of the mark element is not announced by most screen reading technology
    // in its default configuration. It can be made to be announced by using the CSS
    // content property, along with the ::before and ::after pseudo-elements.
    &:before,
    &:after {
        clip-path: inset(100%);
        clip: rect(1px, 1px, 1px, 1px);
        height: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
        width: 1px;
    }

    &:before {
        content: " [highlight start] ";
    }

    &:after {
        content: " [highlight end] ";
    }
}
