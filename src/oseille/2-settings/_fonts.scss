//
// Default fonts' properties.
//
@use 'sass:map';
@use '../1-tools/stdlib' as stdlib;

// Variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variables’ default values.
// @link: https://sass-lang.com/documentation/variables

// Font stack
//
// Keys:
//   - base: Font stack for all elements
//   - code: Code font stack
//   - caption: Font stack 'for <q> <figcaption> <blockquote>
//   - heading: Heading font stack
$stacks: (
    'base': (
        -apple-system,
        blinkmacsystemfont,
        'Segoe UI',
        roboto,
        ubuntu,
        'Helvetica Neue',
        helvetica,
        sans-serif,
    ),
    'code': (
        menlo,
        consolas,
        monospace,
    ),
    'quotation': (
        -apple-system,
        blinkmacsystemfont,
        'Segoe UI',
        roboto,
        ubuntu,
        'Helvetica Neue',
        helvetica,
        sans-serif,
    ),
    'heading': (
        -apple-system,
        blinkmacsystemfont,
        'Segoe UI',
        roboto,
        ubuntu,
        'Helvetica Neue',
        helvetica,
        sans-serif,
    ),
) !default;

//
// Font sizes
//
// Keys:
//   - accessible: Accessible root font size for all elements
//   - not-accessible: Not accessible root font size for all elements (`px` only)
//   - body: Relative font-sizing everywhere else on the page
//   - ratio-heading: Font size ratio for headings. ( h5 is 1em, h1 is 1em * ratio^4. See element/content_sectioning/heading.scss)
//   - footer: Font size for text in footer element.
//   - mark: Font size for <mark>.
//   - small: Font size for small element ( <small>, <sub>, <sup>)
//   - code: Font size for monospace element like <code>, <kbd>, ...
//   - cite: Font size for the [cite] of <blockquote>
//   - caption: Font size for the <figcaption> element
//   - legend: Font size for the <legend> element
//   - label: Font size for the <label> element
//   - quotation: Font size for the quotation of <blockquote>
//   - input: Font size for all inputs
//   - close: Font size for the close button of the modal dialog
$sizes: (
    'accessible': 100%,
    'not-accessible': 16px,
    'body': medium,
    'ratio-heading': 1.25,
    'small': 0.75em,
    'code': 0.85em,
    'footer': 0.875em,
    'mark': 0.95em,
    'cite': 1em,
    'caption': 1em,
    'legend': 1em,
    'label': 1em,
    'quotation': 1em,
    'quotation-before': 3em,
    'input': 1rem,
    'close': 2rem,
    'toggle': 1.5em,
) !default;

//
// Line height
//
// The default line height in browsers is 1.2, which is the optimal value for Times New Roman but not for other fonts.
//
// Keys:
//   - h*: line height for larger text sizes.
//   - subheading: line height for subheading.
//   - main: line height for most elements.
//   - mark: line height for <mark>Accessibility concerns: Use a minimum value of 1.5 for line-height for main paragraph content.
//   - p : line height for main paragraph content
//   - small: line height for smaller text sizes
//   - hr : line height for thematic break
$line-spacing: (
    'h1': calc(1ex / 0.42),
    'h2': calc(1ex / 0.42),
    'h3': calc(1ex / 0.38),
    'h4': calc(1ex / 0.37),
    'h5': calc(1ex / 0.32),
    'h6': calc(1ex / 0.32),
    'subheading': calc(1ex / 0.32),
    'main': 1.5,
    'mark': 1.5,
    'p': calc(1ex / 0.29),
    'hr': 1.25,
    'small': 1.5625,
) !default;

// Hyphenation
//
// Hyphenation support for languages is not always optimal in the various browsers.
// Avoid justified text in the absence of hyphenation.
$hyphenation: false !default;
$hyphenations: (
    'text-align': left,
    'hyphens': none,
) !default;

@if $hyphenation {
    $hyphenations: (
        'text-align': justify,
        'hyphens': auto,
    );
}

// Accessors.
//
// Returns the value in the font-stacks map associated with the given key.
// It returns the base value if the map doesn’t contain the key.
// It returns null if the map doesn’t contain the key nor the base key.
//
// @param {string} $key - The property we are looking for
//
@function get-stack($key) {
    $value: stdlib.get($key, $stacks);

    @if $value == null {
        @warn #{'Font-stack "' + $key + '" not found! Use base font stack.'};

        $value: stdlib.get('base', $stacks);

        @if $value == null {
            @warn #{'Font-stack "base" not found!'};
        }
    }

    @return $value;
}

//
// Returns the value in the font-sizes map associated with the given key.
// It returns null if the map doesn’t contain the key.
//
// @param {string} $key - The property we are looking for
//
@function get-size($key) {
    $value: stdlib.get($key, $sizes);

    @if $value == null {
        @warn #{'Font size "' + $key + '" not found!'};
    }

    @return $value;
}

//
// Returns the value in the line-spacing map associated with the given key.
// It returns null if the map doesn’t contain the key.
//
// @param {string} $key - The property we are looking for
//
@function get-line-spacing($key) {
    $value: stdlib.get($key, $line-spacing);

    @if $value == null {
        @warn #{'Line-spacing "' + $key + '" not found!'};
    }

    @return $value;
}

//
// Returns the value in the hyphenations map associated with the given key.
// It returns null if the map doesn’t contain the key.
//
// @param {string} $key - The property we are looking for
//
@function get-hyphenation($key) {
    $value: stdlib.get($key, $hyphenations);

    @if $value == null {
        @warn #{'Hyphenation "' + $key + '" not found!'};
    }

    @return $value;
}
