//
// Default main colors.
//
// Accessibility:
//  - The colour of text and background content must have sufficient contrast
//  - Use WCAG Grading tool to find the best shade/tone/tint with your fore / background combinaison
//
@use 'sass:map';
@use '../1-tools/stdlib' as stdlib;
@use '../1-tools/color' as *;

// Variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variables’ default values.
// @link: https://sass-lang.com/documentation/variables

//
// Main colors.
//
// Keys:
//   - fore: text & foreground color
//   - back: background color
//   - border: border color
$primary: (
    "fore": #121212,
    "back": #f8f8f8,
    "border": #222222,
) !default;

//
// Other colors.
//
// Keys:
//   - blue: link color
//   - red: error color
//   - green: success color
//   - orange: sidebar
$secondary: (
    "blue": #215cca,
    "red": #ad0000,
    "green": #2ecc40,
    "orange": #ff851b,
    "yellow": #ffdc00,
) !default;

//
// Primary colors palette.
//
// Keys:
//   - fore-*: text & foreground color
//   - back-*: background color
//   - border-*: border color
$primary-palette: (
    "fore-darkest": shade(map.get($primary, "fore"), 20%),
    "fore-darker": tone(map.get($primary, "fore"), 20%),
    "fore-lighter": tint(map.get($primary, "fore"), 20%),
    "fore-lightest": tint(map.get($primary, "fore"), 50%),
    "back-darkest": shade(map.get($primary, "back"), 20%),
    "back-darker": tone(map.get($primary, "back"), 20%),
    "back-lighter": tint(map.get($primary, "back"), 20%),
    "back-lightest": tint(map.get($primary, "back"), 50%),
    "border-darkest": shade(map.get($primary, "border"), 20%),
    "border-darker": tone(map.get($primary, "border"), 20%),
    "border-lighter": tint(map.get($primary, "border"), 20%),
    "border-lightest": tint(map.get($primary, "border"), 49%),
) !default;

//
// Secondary colors palette.
//
// Keys:
//   - blue-*: link color
//   - red-*: error color
//   - green-*: success color
//   - orange-*: more color
//   - yellow-*: more color
$secondary-palette: (
    "blue-darkest": #0e1c43,
    "blue-darker": #183889,
    "blue-lighter": #4083ae,
    "blue-lightest": #338fff,
    "red-darkest": shade(map.get($secondary, "red"), 20%),
    "red-darker": tone(map.get($secondary, "red"), 20%),
    "red-lighter": tint(map.get($secondary, "red"), 20%),
    "red-lightest": tint(map.get($secondary, "red"), 38%),
    "green-darkest": shade(map.get($secondary, "green"), 20%),
    "green-darker": tone(map.get($secondary, "green"), 20%),
    "green-lighter": tint(map.get($secondary, "green"), 20%),
    "green-lightest": tint(map.get($secondary, "green"), 38%),
    "orange-darkest": shade(map.get($secondary, "orange"), 20%),
    "orange-darker": tone(map.get($secondary, "orange"), 20%),
    "orange-lighter": tint(map.get($secondary, "orange"), 20%),
    "orange-lightest": tint(map.get($secondary, "orange"), 38%),
    "yellow-darkest": shade(map.get($secondary, "yellow"), 20%),
    "yellow-darker": tone(map.get($secondary, "yellow"), 20%),
    "yellow-lighter": tint(map.get($secondary, "yellow"), 20%),
    "yellow-lightest": tint(map.get($secondary, "yellow"), 38%),
) !default;

//
// Colors for elements.
//
// Keys:
//   - link: color for <a>:link
//   - visited: color for <a>:visited.
//   - primary: background color variant.
//   - secondary: background color variant.
//   - tertiary: background color variant.
$elements: (
    "link": map.get($secondary, "blue"),
    "visited": map.get($secondary-palette, "blue-darkest"),
    "primary": map.get($secondary, "blue"),
    "secondary": map.get($secondary, "red"),
    "tertiary": map.get($secondary, "green"),
    "sidebar": map.get($secondary, "blue"),
) !default;

// Functions.
//
// Returns the value in the color map associated with the given key.
// It returns null if any map doesn’t contain the key.
//
// @param {string} $key - The color that you want to search for
//
@function get($key) {
    $color: stdlib.get-list($key, $primary, $secondary, $primary-palette, $secondary-palette, $elements);

    @if $color == null {
        @warn #{'Color "' + $key + '" not found!'};
    }

    @return $color;
}
