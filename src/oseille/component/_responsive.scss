//
// Menu drawer
// The drawer component is a responsive navigation menus for web apps.
//
@use 'sass:map';
@use '../default/stdlib';

// Variables.
//
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

// Basic box model
$_box-spacing: (
    "padding": 0.5rem,
    "margin": 0.5rem,
) !default;

// Borders.
//
// Keys:
//   - radius: rounds the corners of an element's outer border edge.
//   - shadow: shadow effects around an element's frame.
//   - width: thickness of the border.
$_borders: (
    "radius": 0.125rem,
    "shadow": none,
    "width": 1px,
) !default;

// Palette
$_colors: (
    "close": #121212,
    "back": #f8f8f8,
    "hover-back": #e0e0e0, // See $primary-palette.back-darker in default/color.scss
    "border": #909090 // See $primary-palette.border-lightest in default/color.scss,,,,,
) !default;

// Font sizes
$_font-sizes: (
    "toggle": 1.5em,
    "close": 2rem,
) !default;

// Breakpoints
$_breakpoints: (
    "medium": 768px,
) !default;

// Others
$_width: 320px !default;
$_right: true !default; // Appears on the right side of the screen

// Private variables

$_class-name: (
    "main": "drawer",
    "toggle": "drawer-toggle",
    "persistent": "persistent",
    "close": "drawer-close",
);

/* Drawer styling */

.#{map.get($_class-name, "toggle")} {
    &:before {
        display: inline-block;
        position: relative;
        vertical-align: bottom;

        // Spaces ensure compatibility with buttons that have text and that textless
        // buttons will have some extra padding.
        content: "\00a0\2261\00a0";

        font-family: sans-serif;
        font-size: map.get($_font-sizes, "toggle");
    }

    @media screen and (min-width: #{map.get($_breakpoints, "medium")}) {
        &:not(.#{map.get($_class-name, "persistent")}) {
            display: none;
        }
    }
}

[type="checkbox"].#{map.get($_class-name, "main")} {
    height: 1px;
    width: 1px;

    margin: -1px;

    overflow: hidden;
    position: absolute;

    clip: rect(0 0 0 0);
    -webkit-clip-path: inset(100%);
    clip-path: inset(100%);

    + * {
        display: block;
        box-sizing: border-box;
        position: fixed;
        top: 0;
        width: $_width;
        height: 100vh;
        overflow-y: auto;

        background: var(--back-color, map.get($_colors, "back"));

        // Set to 0 to override the value from `nav`.
        margin: 0;
        border-radius: 0;
        border: map.get($_borders, "width") solid var(--border-color, map.get($_colors, "border"));

        @include stdlib.box-shadow(map.get($_borders, "shadow"));

        z-index: 1110;

        @if $_right {
            right: -$_width;
            transition: right 0.3s;
        } @else {
            left: -$_width;
            transition: left 0.3s;
        }

        & .#{map.get($_class-name, "close")} {
            position: absolute;
            top: map.get($_box-spacing, "margin");
            right: map.get($_box-spacing, "margin");
            z-index: 1111;

            width: map.get($_font-sizes, "close");
            height: map.get($_font-sizes, "close");

            border-radius: map.get($_borders, "radius");
            padding: map.get($_box-spacing, "padding");

            // Fixes the offset from label
            margin: 0;

            @supports (cursor: pointer) {
                cursor: pointer;
            }

            transition: background 0.3s;

            &:before {
                // Transparent background unless hovered over. Does not block text behind it.
                display: block;
                content: "\00D7";
                color: var(--drawer-close-color, map.get($_colors, "close"));
                position: relative;
                font-family: sans-serif;
                font-size: map.get($_font-sizes, "close");
                line-height: 1; // Setting to 1 seems to center the 'X' properly.
                text-align: center;
            }

            &:hover,
            &:focus {
                background: var(--back-hover-color, map.get($_colors, "hover-back"));
            }
        }

        @media screen and (max-width: #{$_width}) {
            width: 100%;
        }
    }

    &:checked + * {
        @if $_right {
            right: 0;
        } @else {
            left: 0;
        }
    }

    @media screen and (min-width: #{map.get($_breakpoints, "medium")}) {
        &:not(.#{map.get($_class-name, "persistent")}) + * {
            position: static;
            height: 100%;
            z-index: 1100;
            
            & .#{map.get($_class-name, "close")} {
                display: none;
            }
        }
    }
}
