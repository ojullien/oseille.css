//
// Definitions for progress elements and spinners.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use 'sass:map';
@use '../1-tools/box-shadow' as boxshadow;
@use '../2-settings/colors' as colors;
@use '../2-settings/borders' as borders;
@use '../2-settings/box-model' as boxmodel;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

// Classnames
//
// Keys:
//   - inline: inline <progress> elements
//   - spinner: spinner donuts
$_classnames: (
    'inline': 'inline',
    'spinner': 'spinner',
) !default;

// Progess
//
// Keys:
//   - width: Width of inline <progress> element
//   - height: Height of <progress>
//   - max: Arithmetic max value
$_progress: (
    'width': 60%,
    'height': 0.75rem,
    'max': 1000,
) !default;

// Donut
//
// Keys:
//   - size:Size
//   - thickness: Border thickness
$_donut: (
    'size': 1.25rem,
    'thickness': 0.25rem,
) !default;

// Should spinner donuts be included? (boolean)
$_include-spinner-donut: true !default;

/* Default styling for progress. */
progress {
    display: block;
    vertical-align: baseline; // Correct vertical alignment in some browsers.
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    height: map.get($_progress, 'height');
    width: calc(100% - 2 * #{boxmodel.get('margin')});
    margin: boxmodel.get('margin');
    border: 0; // Removes default border
    border-radius: calc(2 * #{borders.get('radius')});

    @include boxshadow.box-shadow(borders.get('shadow'));

    background-color: var(--progress-back-color, #{colors.get('back-darkest')});
    color: var(--progress-fore-color, #{colors.get('fore')});

    // Foreground color on webkit browsers
    &::-webkit-progress-value {
        background-color: var(--progress-fore-color, #{colors.get('fore')});
        border-top-left-radius: calc(2 * #{borders.get('radius')});
        border-bottom-left-radius: calc(2 * #{borders.get('radius')});
    }

    // Background color on webkit browser
    &::-webkit-progress-bar {
        background-color: var(--progress-back-color, #{colors.get('back-darkest')});
    }

    // Foreground color on Firefox
    &::-moz-progress-bar {
        background-color: var(--progress-fore-color, #{colors.get('fore')});
        border-top-left-radius: calc(2 * #{borders.get('radius')});
        border-bottom-left-radius: calc(2 * #{borders.get('radius')});
    }

    &[value='#{map.get($_progress, "max")}'] {
        &::-webkit-progress-value {
            border-radius: calc(2 * #{borders.get('radius')});
        }
        &::-moz-progress-bar {
            border-radius: calc(2 * #{borders.get('radius')});
        }
    }

    &.#{#{map.get($_classnames, 'inline')}} {
        display: inline-block;
        vertical-align: middle; // Align progress bar vertically to look better with text next to it.
        width: map.get($_progress, 'width');
    }

    &.primary {
        --progress-fore-color: var(--primary-color, #{colors.get('primary')});
    }

    &.secondary {
        --progress-fore-color: var(--secondary-color, #{colors.get('secondary')});
    }

    &.tertiary {
        --progress-fore-color: var(--tertiary-color, #{colors.get('tertiary')});
    }
}

// Style for donut spinner
@if $_include-spinner-donut {
    // Donut spinner animation
    @keyframes spinner-donut-anim {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
    .#{map.get($_classnames, 'spinner')} {
        display: inline-block;
        margin: boxmodel.get('margin');
        border: map.get($_donut, 'thickness') solid var(--spinner-back-color, #{colors.get('back-darkest')});
        border-left: map.get($_donut, 'thickness') solid var(--spinner-fore-color, #{colors.get('fore')});
        border-radius: 50%;
        width: map.get($_donut, 'size');
        height: map.get($_donut, 'size');
        animation: spinner-donut-anim 1.2s linear infinite;

        &.primary {
            --spinner-fore-color: var(--primary-color, #{colors.get('primary')});
        }

        &.secondary {
            --spinner-fore-color: var(--secondary-color, #{colors.get('secondary')});
        }

        &.tertiary {
            --spinner-fore-color: var(--tertiary-color, #{colors.get('tertiary')});
        }
    }
}
