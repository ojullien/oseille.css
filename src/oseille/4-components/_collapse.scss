//
// Spoilers & accordions
//
// They are composed of three components - the wrapper, the toggle button and
// the content container.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use '../1-tools/box-shadow' as boxshadow;
@use '../2-settings/colors' as colors;
@use '../2-settings/borders' as borders;
@use '../2-settings/box-model' as boxmodel;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

$_label-height: 1.5rem !default; // Height for the labels in the collapse component
$_content-max-height: 400px !default; // Max height for the content panes in the collapse component
$_collapse-name: 'collapse' !default; // Class name for collapse component

/* Spoilers & Accordions styling */

.#{$_collapse-name} {
    width: calc(100% - 2 * #{boxmodel.get('margin')});
    opacity: 1;
    display: flex;
    flex-direction: column;
    margin: boxmodel.get('margin');
    border-radius: borders.get('radius');

    @include boxshadow.box-shadow(borders.get('shadow'));

    & > [type='radio'],
    & > [type='checkbox'] {
        height: 1px;
        width: 1px;
        margin: -1px;
        overflow: hidden;
        position: absolute;
        clip: rect(0 0 0 0);
        @supports ((clip-path: inset(100%)) or (-webkit-clip-path: inset(100%))) {
            -webkit-clip-path: inset(100%);
            clip-path: inset(100%);
        }
    }
    & > label {
        flex-grow: 1;
        display: inline-block;
        //height: $_label-height;
        cursor: pointer;
        transition: background 0.3s;
        color: var(--collapse-fore-color, colors.get('fore'));
        background-color: var(--collapse-back-color, colors.get('back'));
        border: borders.get('width') solid var(--collapse-border-color, colors.get('border-lightest'));
        padding: calc(1.5 * #{boxmodel.get('padding')});
        &:hover,
        &:focus {
            background-color: var(--collapse-back-hover-color, colors.get('back-hover'));
        }
        + div {
            flex-basis: -webkit-auto;
            flex-basis: auto;
            height: 1px;
            width: 1px;
            margin: -1px;
            overflow: hidden;
            position: absolute;
            clip: rect(0 0 0 0);
            @supports ((clip-path: inset(100%)) or (-webkit-clip-path: inset(100%))) {
                -webkit-clip-path: inset(100%);
                clip-path: inset(100%);
            }
            transition: max-height 0.3s;
            max-height: 1px; // for transition
        }
    }
    > :checked + label {
        background-color: var(--collapse-back-color, colors.get('back'));
        border-bottom-color: var(--collapse-border-color, colors.get('blue'));
        & + div {
            position: relative;
            width: 100%;
            height: auto;
            overflow: auto;
            margin: 0;
            background-color: var(--collapse-back-color, colors.get('back'));
            border: borders.get('width') solid var(--collapse-border-color, colors.get('border-lightest'));
            border-top: 0;
            padding: boxmodel.get('padding');
            max-height: $_content-max-height;
            clip: auto;
            @supports ((clip-path: inset(0%)) or (-webkit-clip-path: inset(0%))) {
                -webkit-clip-path: inset(0%);
                clip-path: inset(0%);
            }
        }
    }
    & > label:not(:first-of-type) {
        // Keep these down here, as it overrides some other styles.
        border-top: 0;
    }
    & > label:first-of-type {
        border-radius: borders.get('radius') borders.get('radius') 0 0;
    }
    & > label:last-of-type:not(:first-of-type) {
        border-radius: 0 0 borders.get('radius') borders.get('radius');
    }
    & > label:last-of-type:first-of-type {
        border-radius: borders.get('radius');
    }
    & > :checked:last-of-type:not(:first-of-type) + label {
        border-radius: 0;
    }
    & > :checked:last-of-type + label + div {
        border-radius: 0 0 borders.get('radius') borders.get('radius');
    }
}

.symbol {
    display: inline-block;
    width: 1em;
    height: 1em;
    vertical-align: -0.125em;
    stroke: currentColor;
    stroke-width: 2;
    fill: none;
    padding-left: 3px;
}
