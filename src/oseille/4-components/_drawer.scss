//
// Menu drawer
// The drawer component is a responsive navigation menus for web apps.
// Buttons element is required
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//

@use "sass:map";
@use "../2-settings/colors" as colors;
@use "../2-settings/borders" as borders;
@use "../2-settings/box-model" as boxmodel;
@use "../2-settings/fonts" as fonts;
@use "../2-settings/responsive" as breakpoints;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

$_width: 320px !default;
$_right: true !default; // Appears on the right side of the screen

// Classnames
//
// Keys:
//   - main:
//   - toggle:
//   - persistent:
//   - close:
$_classnames: (
  "main": "drawer",
  "toggle": "drawer-toggle",
  "persistent": "persistent",
  "close": "drawer-close",
) !default;

/* Drawer styling */

.#{map.get($_classnames, 'toggle')} {
  &::before {
    // Spaces ensure compatibility with buttons that have text and that textless
    // buttons will have some extra padding.
    /* stylelint-disable */
    content: "\00a0\2261\00a0";
    /* stylelint-enable */
    display: inline-block;
    font-family: sans-serif;
    font-size: fonts.get-size("toggle");
    position: relative;
    vertical-align: bottom;
  }

  @media screen and (min-width: #{breakpoints.get("medium")}) {
    &:not(.#{map.get($_classnames, 'persistent')}) {
      display: none;
    }
  }
}

[type='checkbox'].#{map.get($_classnames, 'main')} {
  display: none;

  + * {
    background-color: var(--drawer-back-color, colors.get("back"));
    border: borders.get("thin") solid var(--drawer-border-color, colors.get("border"));
    border-radius: 0;
    display: block;
    height: 100vh;

    // Set to 0 to override the value from `nav`.
    margin: 0;
    overflow-y: auto;
    position: fixed;
    /* stylelint-disable */
    @if $_right {
      right: -$_width;
      transition: right 0.3s;
    }
    @else {
      left: -$_width;
      transition: left 0.3s;
    }
    top: 0;
    /* stylelint-enable */
    width: $_width;
    z-index: 1110;

    .#{map.get($_classnames, 'close')} {
      box-sizing: content-box;
      height: fonts.get-size("close");

      // Fixes the offset from label
      margin: 0;
      padding: boxmodel.get("padding");
      // The close element is a label element styled as a button.
      // Must also include the .button class
      position: absolute;
      right: boxmodel.get("margin");
      top: boxmodel.get("margin");
      width: fonts.get-size("close");
      z-index: 1111;

      &::before {
        content: "\00D7";
        display: block;
        font-family: sans-serif;
        font-size: fonts.get-size("close");
        line-height: 1; // Setting to 1 seems to center the 'X' properly.
        position: relative;
        text-align: center;
      }
    }

    @media screen and (max-width: #{$_width}) {
      width: 100%;
    }
  }

  &:checked + * {
    @if $_right {
      right: 0;
    }
    @else {
      left: 0;
    }
  }

  @media screen and (min-width: #{breakpoints.get("medium")}) {
    &:not(.#{map.get($_classnames, 'persistent')}) + * {
      height: 100%;
      position: static;
      z-index: 1100;

      .#{map.get($_classnames, 'close')} {
        display: none;
      }
    }
  }
}
