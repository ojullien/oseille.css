//
// Menu drawer
// The drawer component is a responsive navigation menus for web apps.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//
@use 'sass:map';
@use '../1-tools/box-shadow' as boxshadow;
@use '../2-settings/colors' as colors;
@use '../2-settings/borders' as borders;
@use '../2-settings/box-model' as boxmodel;
@use '../2-settings/fonts' as fonts;
@use '../2-settings/responsive' as breakpoints;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

$_width: 320px !default;
$_right: true !default; // Appears on the right side of the screen

// Classnames
//
// Keys:
//   - main:
//   - toggle:
//   - persistent:
//   - close:
$_classnames: (
    'main': 'drawer',
    'toggle': 'drawer-toggle',
    'persistent': 'persistent',
    'close': 'drawer-close',
) !default;

/* Drawer styling */

.#{map.get($_classnames, 'toggle')} {
    &:before {
        display: inline-block;
        position: relative;
        vertical-align: bottom;

        // Spaces ensure compatibility with buttons that have text and that textless
        // buttons will have some extra padding.
        content: '\00a0\2261\00a0';

        font-family: sans-serif;
        font-size: fonts.get-size('toggle');
    }

    @media screen and (min-width: #{breakpoints.get('medium')}) {
        &:not(.#{map.get($_classnames, 'persistent')}) {
            display: none;
        }
    }
}

[type='checkbox'].#{map.get($_classnames, 'main')} {
    height: 1px;
    width: 1px;

    margin: -1px;

    overflow: hidden;
    position: absolute;

    clip: rect(0 0 0 0);
    @supports ((clip-path: inset(100%)) or (-webkit-clip-path: inset(100%))) {
        -webkit-clip-path: inset(100%);
        clip-path: inset(100%);
    }

    + * {
        display: block;
        box-sizing: border-box;
        position: fixed;
        top: 0;
        width: $_width;
        height: 100vh;
        overflow-y: auto;

        background-color: var(--drawer-back-color, colors.get('back'));

        // Set to 0 to override the value from `nav`.
        margin: 0;
        border-radius: 0;
        border: borders.get('width') solid var(--drawer-border-color, colors.get('border-lightest'));

        @include boxshadow.box-shadow(borders.get('shadow'));

        z-index: 1110;

        @if $_right {
            right: -$_width;
            transition: right 0.3s;
        } @else {
            left: -$_width;
            transition: left 0.3s;
        }

        & .#{map.get($_classnames, 'close')} {
            position: absolute;
            top: boxmodel.get('margin');
            right: boxmodel.get('margin');
            z-index: 1111;

            width: fonts.get-size('close');
            height: fonts.get-size('close');

            border-radius: borders.get('radius');
            padding: boxmodel.get('padding');

            // Fixes the offset from label
            margin: 0;

            @supports (cursor: pointer) {
                cursor: pointer;
            }

            transition: background 0.3s;

            &:before {
                // Transparent background unless hovered over. Does not block text behind it.
                display: block;
                content: '\00D7';
                color: var(--drawer-close-color, colors.get('fore'));
                position: relative;
                font-family: sans-serif;
                font-size: fonts.get-size('close');
                line-height: 1; // Setting to 1 seems to center the 'X' properly.
                text-align: center;
            }

            &:hover,
            &:focus {
                background-color: var(--drawer-back-hover-color, colors.get('back-hover'));
            }
        }

        @media screen and (max-width: #{$_width}) {
            width: 100%;
        }
    }

    &:checked + * {
        @if $_right {
            right: 0;
        } @else {
            left: 0;
        }
    }

    @media screen and (min-width: #{breakpoints.get('medium')}) {
        &:not(.#{map.get($_classnames, 'persistent')}) + * {
            position: static;
            height: 100%;
            z-index: 1100;

            & .#{map.get($_classnames, 'close')} {
                display: none;
            }
        }
    }
}
