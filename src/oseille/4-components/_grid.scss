//
// Definitions for the grid system and containers.
// The grid system uses the flexbox module, meaning it might be incompatible with certain browsers.
//
// You may override the default values of the settings' variables, if needed, with the @use rule.
// See flavors/oseille.scss and the 2-settings*.scss files.
//

@use "sass:map";
@use "sass:math";
@use "../2-settings/box-model" as boxmodel;
@use "../2-settings/responsive" as breakpoints;

// Private variables.
//
// Variables defined with !default can be configured when loading this module with the @use rule.
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

$_include-parent-layout: true !default; // Flag for rows defining column layouts (`true`/`false`).
$_column-count: 12 !default; // Number of columns in the grid (integer value only).

// Classnames
//
// Keys:
//   - container: grid system container
//   - row-parent: prefix for the grid's row parents
//   - column: prefix for the grid's columns
//   - offset: suffix for the grid's offsets
//   - row: grid system rows
//   - normal: suffix for columns with normal priority
//   - first: suffix for columns with highest priority
//   - last: suffix for columns with lowest priorty
//   - small: Small screen class prefix
//   - medium: Medium screen class prefix
//   - large: Large screen class prefix
$_classnames: (
  "container": "container",
  "row-parent": "cols",
  "column": "col",
  "offset": "offset",
  "row": "row",
  "normal": "normal",
  "first": "first",
  "last": "last",
  "small": "sm",
  "medium": "md",
  "large": "lg",
) !default;

// Inline mixins, used to generate class definitions for each grid step.

@mixin reorder-definitions($size-prefix) {
  $column: #{map.get($_classnames, "column")}-#{$size-prefix};

  .#{$column}-#{map.get($_classnames, 'normal')} {
    order: initial;
  }

  .#{$column}-#{map.get($_classnames, 'first')} {
    order: -999;
  }

  .#{$column}-#{map.get($_classnames, 'last')} {
    order: 999;
  }
}

@mixin generate-grid-size-include-parent-layout($size-prefix) {
  $column: #{map.get($_classnames, "column")}-#{$size-prefix};
  $offset: #{$column}-#{map.get($_classnames, "offset")};
  $row: #{map.get($_classnames, "row")};
  $row-parent: #{map.get($_classnames, "row-parent")}-#{$size-prefix};

  // Reordering definitions.

  @include reorder-definitions($size-prefix);

  // Grid column generic definitions.

  .#{$column},
  [class^='#{$column}-'],
  [class^='#{$offset}-'],
  .#{$row}[class*='#{$row-parent}-'] > * {
    flex: none;
    //flex: auto;
    padding: 0 calc(#{boxmodel.get("padding")} / 2);
  }

  // Grid column specific definition for flexible column.
  .#{$column},
  .#{$row}.#{$row-parent} > * {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
  }

  // Grid column specific definitions for predefined columns.

  @for $i from 1 through $_column-count {
    .#{$column}-#{$i},
    .#{$row}.#{$row-parent}-#{$i} > * {
      flex-basis: #{math.div($i * 100%, $_column-count)};
      max-width: #{math.div($i * 100%, $_column-count)};
    }

    // Offest definitions.
    .#{$offset}-#{($i - 1)} {
      @if ($i - 1) == 0 {
        margin-left: 0;
      }
      @else {
        margin-left: #{math.div(($i - 1) * 100%, $_column-count)};
      }
    }
  }
}

@mixin generate-grid-size-not-including-parent-layout($size-prefix) {
  $column: #{map.get($_classnames, "column")}-#{$size-prefix};
  $offset: #{$column}-#{map.get($_classnames, "offset")};

  // Reordering definitions.

  @include reorder-definitions($size-prefix);

  // Grid column generic definitions.
  .#{$column},
  [class^='#{$column}-'],
  [class^='#{$offset}-'] {
    flex: 0 0 auto;
    padding: 0 calc(#{boxmodel.get("padding")} / 2);
  }

  // Grid column specific definition for flexible column.
  .#{$column} {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
  }

  // Grid column specific definitions for predefined columns.

  @for $i from 1 through $_column-count {
    .#{$column}-#{$i} {
      flex-basis: #{math.div($i * 100%, $_column-count)};
      max-width: #{math.div($i * 100%, $_column-count)};
    }

    // Offest definitions.
    .#{$offset}-#{($i - 1)} {
      @if ($i - 1) == 0 {
        margin-left: 0;
      }
      @else {
        margin-left: #{math.div(($i - 1) * 100%, $_column-count)};
      }
    }
  }
}

/* Fluid grid system container styling */

.#{map.get($_classnames, 'container')} {
  margin: 0 auto;
  padding: 0 calc(1.5 * #{boxmodel.get("padding")});
}

.#{map.get($_classnames, 'row')} {
  display: flex;
  flex: initial;
  flex-flow: row wrap;
}

@if $_include-parent-layout {
  // Definitions for smaller screens.

  @include generate-grid-size-include-parent-layout(map.get($_classnames, "small"));

  // Definitions for medium screens.

  @media screen and (min-width: #{breakpoints.get("medium")}) {
    @include generate-grid-size-include-parent-layout(map.get($_classnames, "medium"));
  }

  // Definitions for large screens.

  @media screen and (min-width: #{breakpoints.get("large")}) {
    @include generate-grid-size-include-parent-layout(map.get($_classnames, "large"));
  }
}
@else {
  // Definitions for smaller screens.

  @include generate-grid-size-not-including-parent-layout(map.get($_classnames, "small"));

  // Definitions for medium screens.

  @media screen and (min-width: #{breakpoints.get("medium")}) {
    @include generate-grid-size-not-including-parent-layout(map.get($_classnames, "medium"));
  }

  // Definitions for large screens.

  @media screen and (min-width: #{breakpoints.get("large")}) {
    @include generate-grid-size-not-including-parent-layout(map.get($_classnames, "large"));
  }
}
