//
// Definitions for the grid system and containers.
// The grid system uses the flexbox module, meaning it might be incompatible with certain browsers.
//
@use 'sass:map';

// Variables.
//
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

// Basic box model
$_box-spacing: (
    "padding": 0.5rem,
) !default;

// Breakpoints
$_breakpoints: (
    "medium": 768px,
    "large": 1280px,
) !default;

// Private variables

$_include-parent-layout: true; // Flag for rows defining column layouts (`true`/`false`).
$_column-count: 12; // Number of columns in the grid (integer value only).

// Class names
$_classnames: (
    // Class name for the grid system container.
        "container": "container",
    // Class name prefix for the grid's row parents.
        "row-parent": "cols",
    // Class name prefix for the grid's columns.
        "column": "col",
    // Class name suffix for the grid's offsets.
        "offset": "offset",
    // Class name for the grid system rows.
        "row": "row",
    // Class name suffix for columns with normal priority.
        "normal": "normal",
    // Class name suffix for columns with highest priority.
        "first": "first",
    // Class name suffix for columns with lowest priorty.
        "last": "last",
    // Small screen class prefix.
        "small": "sm",
    // Medium screen class prefix.
        "medium": "md",
    // Large screen class prefix.
        "large": "lg"
) !default;

// Inline mixin, used to generate class definitions for each grid step.
@mixin generate-grid-size($size-prefix) {
    @if $_include-parent-layout {
        .#{map.get($_classnames, "column")}-#{$size-prefix},
        [class^="#{map.get($_classnames, "column")}-#{$size-prefix}-"],
        [class^="#{map.get($_classnames, "column")}-#{$size-prefix}-#{map.get($_classnames, "offset")}-"],
        .#{map.get($_classnames, "row")}[class*="#{map.get($_classnames, "row-parent")}-#{$size-prefix}-"] > * {
            box-sizing: border-box;
            //flex: 0 0 auto;
            flex: 1 1 auto;
            padding: 0 calc(#{map.get($_box-spacing, "padding")} / 2);
        }

        // Grid column specific definition for flexible column.
        .#{map.get($_classnames, "column")}-#{$size-prefix},
        .#{map.get($_classnames, "row")}.#{map.get($_classnames, "row-parent")}-#{$size-prefix} > * {
            max-width: 100%;
            flex-grow: 1;
            flex-basis: 0;
        }
    } @else {
        // Grid column generic definitions.
        .#{map.get($_classnames, "column")}-#{$size-prefix},
        [class^="#{map.get($_classnames, "column")}-#{$size-prefix}-"],
        [class^="#{map.get($_classnames, "column")}-#{$size-prefix}-#{map.get($_classnames, "offset")}-"] {
            //flex: 0 0 auto;
            flex: 1 1 auto;
            padding: 0 calc(#{map.get($_box-spacing, "padding")} / 2);
        }

        // Grid column specific definition for flexible column.
        .#{map.get($_classnames, "column")}-#{$size-prefix} {
            max-width: 100%;
            flex-grow: 1;
            flex-basis: 0;
        }
    }

    // Grid column specific definitions for predefined columns.
    @for $i from 1 through $_column-count {
        @if $_include-parent-layout {
            .#{map.get($_classnames, "column")}-#{$size-prefix}-#{$i},
            .#{map.get($_classnames, "row")}.#{map.get($_classnames, "row-parent")}-#{$size-prefix}-#{$i} > * {
                max-width: #{($i * 100% / $_column-count)};
                flex-basis: #{($i * 100% / $_column-count)};
            }
        } @else {
            .#{map.get($_classnames, "column")}-#{$size-prefix}-#{$i} {
                max-width: #{($i * 100% / $_column-count)};
                flex-basis: #{($i * 100% / $_column-count)};
            }
        }

        // Offest definitions.
        .#{map.get($_classnames, "column")}-#{$size-prefix}-#{map.get($_classnames, "offset")}-#{($i - 1)} {
            @if ($i - 1) == 0 {
                margin-left: 0;
            } @else {
                margin-left: #{(($i - 1) * 100% / $_column-count)};
            }
        }
    }

    // Reordering definitions.
    .#{map.get($_classnames, "column")}-#{$size-prefix}-#{map.get($_classnames, "normal")} {
        order: initial;
    }

    .#{map.get($_classnames, "column")}-#{$size-prefix}-#{map.get($_classnames, "first")} {
        order: -999;
    }

    .#{map.get($_classnames, "column")}-#{$size-prefix}-#{map.get($_classnames, "last")} {
        order: 999;
    }
}

/* Fluid grid system container styling */

.#{map.get($_classnames, "container")} {
    flex-wrap: wrap;
    margin: 0 auto;
    padding: 0 calc(1.5 * #{map.get($_box-spacing, "padding")});
}

.#{map.get($_classnames, "row")} {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-flow: row wrap;
}

// Definitions for smaller screens.
@include generate-grid-size(map.get($_classnames, "small"));

// Definitions for medium screens.
@media screen and (min-width: #{map.get($_breakpoints, "medium")}) {
    @include generate-grid-size(map.get($_classnames, "medium"));
}

// Definitions for large screens.
@media screen and (min-width: #{map.get($_breakpoints, "large")}) {
    @include generate-grid-size(map.get($_classnames, "large"));
}
