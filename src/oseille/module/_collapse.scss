//
// Spoilers & accordions
//
// They are composed of three components - the wrapper, the toggle button and
// the content container.
//
@use 'sass:map';
@use '../common/stdlib';

// Public variables.
// May be overrided using @use <url> with (<variable>: <value>, <variable>: <value>)

$border-radius: 0.125rem !default; // Universal border-radius for most elements
$margin: 0.5rem !default; // Universal margin for the most elements
$padding: 0.5rem !default; // Universal padding for the most elements
$box-shadow: none !default; // Universal box-shadow for most elements
$label-height: 1.5rem !default; // Height for the labels in the collapse component
$content-max-height: 400px !default; // Max height for the content panes in the collapse component
$colors: (
    // Background color for labels in the collapse component
        "label-back-color": #e8e8e8,
    // Text color for labels in the collapse component
        "label-fore-color": #212121,
    // Background color for labels in the collapse component (hover)
        "label-hover-back-color": #f0f0f0,
    // Background color for selected labels in the collapse component
        "selected-label-back-color": #ececec,
    // Border color for collapse component
        "border-color": #ddd,
    // Border color for collapse component's selected labels
        "selected-label-border-color": #0277bd,
    // Background color for collapse component's content panes,
        "content-back-color": #fafafa
) !default;

// Private variables
$_collapse-name: "collapse" !default; // Class name for collapse component

/* Spoilers & Accordions styling */

.#{$_collapse-name} {
    width: calc(100% - 2 * #{$margin});
    opacity: 1;
    display: flex;
    flex-direction: column;
    margin: $margin;
    border-radius: $border-radius;

    @include stdlib.box-shadow($box-shadow);

    & > [type="radio"],
    & > [type="checkbox"] {
        height: 1px;
        width: 1px;
        margin: -1px;
        overflow: hidden;
        position: absolute;
        clip: rect(0 0 0 0);
        -webkit-clip-path: inset(100%);
        clip-path: inset(100%);
    }
    & > label {
        flex-grow: 1;
        display: inline-block;
        height: $label-height;
        cursor: pointer;
        transition: background 0.3s;
        color: map.get($colors, "label-fore-color");
        background: map.get($colors, "label-back-color");
        border: var(--px) solid map.get($colors, "border-color");
        padding: calc(1.5 * #{$padding});
        &:hover,
        &:focus {
            background: map.get($colors, "label-hover-back-color");
        }
        + div {
            flex-basis: -webkit-auto;
            flex-basis: auto;
            height: 1px;
            width: 1px;
            margin: -1px;
            overflow: hidden;
            position: absolute;
            clip: rect(0 0 0 0);
            -webkit-clip-path: inset(100%);
            clip-path: inset(100%);
            transition: max-height 0.3s;
            max-height: 1px; // for transition
        }
    }
    > :checked + label {
        background: map.get($colors, "selected-label-back-color");
        border-bottom-color: map.get($colors, "selected-label-border-color");
        & + div {
            box-sizing: border-box;
            position: relative;
            width: 100%;
            height: auto;
            overflow: auto;
            margin: 0;
            background: map.get($colors, "content-back-color");
            border: var(--px) solid map.get($colors, "border-color");
            border-top: 0;
            padding: $padding;
            clip: auto;
            -webkit-clip-path: inset(0%);
            clip-path: inset(0%);
            max-height: $content-max-height;
        }
    }
    & > label:not(:first-of-type) {
        // Keep these down here, as it overrides some other styles.
        border-top: 0;
    }
    & > label:first-of-type {
        border-radius: $border-radius $border-radius 0 0;
    }
    & > label:last-of-type:not(:first-of-type) {
        border-radius: 0 0 $border-radius $border-radius;
    }
    & > label:last-of-type:first-of-type {
        border-radius: $border-radius;
    }
    & > :checked:last-of-type:not(:first-of-type) + label {
        border-radius: 0;
    }
    & > :checked:last-of-type + label + div {
        border-radius: 0 0 $border-radius $border-radius;
    }
}
