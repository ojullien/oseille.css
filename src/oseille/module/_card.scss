//
// Card
//
@use 'sass:map';
@use '../default/stdlib';

// Variables.
//
// To load this module with configuration, use @use <url> with (<variable>: <value>, <variable>: <value>).
// The configured values will override the variablesâ€™ default values.
// @link: https://sass-lang.com/documentation/variables

// Basic box model
$_box-spacing: (
    // Padding: creates extra space within an element.
        "padding": 0.5rem,
    // Margins: create extra space around an element.
        "margin": 0.5rem
) !default;

// Borders
$_borders: (
    // radius: rounds the corners of an element's outer border edge.
        "radius": 0.125rem,
    // shadow: adds shadow effects around an element's frame.
        "shadow": none
) !default;

// Main colors. WCAG Grading AAA.
$_primary-colors: (
    // Text & foreground color
        "fore": #121212,
    // Background color
        "back": #f8f8f8,
    // Border color for the cards.
        "border": #ddd,
    // Text & foreground color
        "error-fore": #f8f8f8,
    // Background color
        "error-back": #b71c1c,
    // Border color for the cards.
        "error-border": #a71a1a,
    // Text & foreground color
        "warning-fore": #121212,
    // Background color
        "warning-back": #ffca28,
    // Border color for the cards.
        "warning-border": #e8b825,
    // Alternative Background color
        "alt-back": #e0e0e0
) !default;

// Class names
$_classnames: (
    // Class name for the cards.
        "card": "card",
    // Class name for the cards' sections.
        "section": "section",
    // Class name for the cards' sections (media cotent).
        "media": "media"
);

$_normal-width: 320px; // Width for normal cards.
$_section-media-height: 200px; // Height for cards' media sections.

// Mixin for alternate card (card size variants):
//  $alt-size: The width of the alternate size card.
@mixin make-card-alt-size($alt-size) {
    @media screen and (min-width: #{$alt-size}) {
        max-width: $alt-size;
    }
}

// Mixin for colors properties setting:
//  $alt-colors: map of alternatives colors (<property>:<#color>).
@mixin make-card-alt-color($alt-colors) {
    @each $property, $value in $alt-colors {
        #{$property}: $value;
    }
}

/* Card styling */

.#{map.get($_classnames, "card")} {
    // New syntax
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-self: center;
    position: relative;
    width: 100%;

    // Actual styling for the cards
    --card-fore-color: #{map.get($_primary-colors, "fore")};
    --card-back-color: #{map.get($_primary-colors, "back")};
    --card-border-color: #{map.get($_primary-colors, "border")};

    background: var(--card-back-color, #{map.get($_primary-colors, "back")}); // Allows live color tunning
    color: var(--card-fore-color, #{map.get($_primary-colors, "fore")}); // Allows live color tunning

    border: var(--px) solid var(--card-border-color, #{map.get($_primary-colors, "border")});
    border-radius: map.get($_borders, "radius");
    margin: map.get($_box-spacing, "margin");

    @include stdlib.box-shadow(map.get($_borders, "shadow"));

    overflow: hidden; // Hide overflow from section borders

    // Card sections
    & > .#{map.get($_classnames, "section")} {
        // Reapply background and foreground colors, so that mixins can be applied properly.
        background: var(--card-back-color, #{map.get($_primary-colors, "back")}); // Allows live color tunning
        color: var(--card-fore-color, #{map.get($_primary-colors, "fore")}); // Allows live color tunning
        box-sizing: border-box;
        margin: 0;
        border: 0; // Clean borders and radiuses for any element-based sections
        border-radius: 0; // Clean borders and radiuses for any element-based sections
        border-bottom: var(--px) solid var(--card-border-color, #{map.get($_primary-colors, "border")});
        padding: map.get($_box-spacing, "padding");
        width: 100%;

        // Media sections
        &.#{map.get($_classnames, "media")} {
            height: $_section-media-height;
            padding: 0;
            @supports ((object-fit: cover) or (-o-object-fit: cover)) {
                -o-object-fit: cover;
                object-fit: cover;
            }
        }

        // Alternative sections
        &.dark {
            @include make-card-alt-color(
                (
                    "--card-back-color": #{map.get($_primary-colors, "alt-back")},
                )
            );
        }

        &.double-padded {
            padding: calc(1.5 * #{map.get($_box-spacing, "padding")});
        }

        &:last-child {
            border-bottom: 0; // Clean the extra border for last section
        }
    }

    &.warning {
        @include make-card-alt-color(
            (
                "--card-back-color": #{map.get($_primary-colors, "warning-back")},
                "--card-border-color": #{map.get($_primary-colors, "warning-border")},
            )
        );
    }

    &.error {
        @include make-card-alt-color(
            (
                "--card-back-color": #{map.get($_primary-colors, "error-back")},
                "--card-fore-color": #{map.get($_primary-colors, "error-fore")},
                "--card-border-color": #{map.get($_primary-colors, "error-border")},
            )
        );
    }

    &.fluid {
        max-width: 100%;
        width: auto;
    }

    &.small {
        @include make-card-alt-size(240px);
    }

    // Responsiveness (if the screen is larger than card, set max-width)
    @include make-card-alt-size($_normal-width);

    &.large {
        @include make-card-alt-size(480px);
    }
}
